{"version":3,"sources":["components/controllerview/settingtable/SettingComponent.js","components/controllerview/uploadtable/UploadComponent.js","components/controllerview/viewer/SceneComponent.js","components/controllerview/viewer/ViewPortComponent.js","components/controllerview/viewer/ScalelineComponent.js","components/controllerview/addtable/AddComponent.js","components/controllerview/ViewWithControl.js","components/footer/FooterComponent.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","sliderroot","width","spacing","slidermargin","height","margin","marginTop","marginRight","textField","background","borderRadius","opacity","RedSlider","withStyles","root","color","thumb","backgroundColor","border","marginLeft","boxShadow","active","valueLabel","left","track","rail","Slider","GreenSlider","BlueSlider","GridSettings","props","classes","React","useState","planesize","gridsize","gridChange","lightR","lightG","lightB","values","setValues","handleGridChange","prop","event","target","value","handleColorChange","slidervalue","className","Grid","container","direction","alignItems","item","TextField","size","id","variant","label","type","defaultValue","onChange","clsx","InputProps","startAdornment","InputAdornment","position","Fab","aria-label","onClick","Button","disabled","style","fontSize","valueLabelDisplay","min","max","step","FileUpload","file","confirmUpload","fileControl","setFile","name","files","SceneComponent","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","window","innerWidth","innerHeight","useEffect","current","engine","Engine","stencil","scene","Scene","clearColor","Color3","setSize","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","newWidth","newHeight","getEngine","addEventListener","dispose","removeEventListener","ref","translategizmo","rotategizmo","utilLayer","highlight","ViewPortComponent","settingData","setSettings","addData","setAdd","sceneRef","console","log","prePlane","getMeshByID","prePlaneMaterial","getMaterialByID","_width","gridRatio","ground","MeshBuilder","CreateGround","groundMaterial","GridMaterial","majorUnitFrequency","minorUnitVisibility","backFaceCulling","mainColor","lineColor","material","isPickable","addnew","attachedMesh","UtilityLayerRenderer","PositionGizmo","RotationGizmo","HighlightLayer","updateGizmoRotationToMatchAttachedMesh","updateGizmoPositionToMatchAttachedMesh","onPointerDown","evt","pickResult","hit","removeAllMeshes","pickedMesh","addMesh","Magenta","primetype","preBox","primename","Swal","fire","text","showDenyButton","allowOutsideClick","confirmButtonText","denyButtonText","then","result","isConfirmed","icon","showConfirmButton","timer","box","CreateBox","Vector3","Number","positionx","positiony","positionz","scaling","scalex","scaley","scalez","isDenied","preSphere","sphere","CreateSphere","preCylinder","cylinder","CreateCylinder","prePolyhedron","polyhedron","Mesh","CreatePolyhedron","polyhydrontype","camera","ArcRotateCamera","setPosition","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","palette","divider","paper","secondary","ScaleLine","Divider","orientation","flexItem","children","AddComponent","primeData","setPrime","handlePositionChange","FormControl","InputLabel","htmlFor","Select","native","eventvalue","a","input","inputOptions","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","inputPlaceholder","showCancelButton","inputValidator","Promise","resolve","Polyhydrons","inputProps","extendedIcon","FloatingActionButtons","confirmed","showAdd","showSettings","showEdit","showImport","faFileUpload","data","handleClick","preventDefault","open","SimpleBreadcrumbs","Breadcrumbs","Typography","Link","href","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.27a0e379.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles} from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Confirm from '@material-ui/icons/Check';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  sliderroot: {\n    width: 100 + theme.spacing(3) * 2,\n  },\n  slidermargin: {\n    height: theme.spacing(2),\n  },\n  margin: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  textField: {\n    width: '12ch',\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n}));\n\nconst RedSlider = withStyles({\n  root: {\n    color: 'red',\n    height: 4,\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst GreenSlider = withStyles({\n  root: {\n    color: 'green',\n    height: 4,\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst BlueSlider = withStyles({\n  root: {\n    color: 'blue',\n    height: 4,\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\n\n// export default function InputAdornments() {\nconst GridSettings = props =>{\n  const classes = useStyles();\n  const [values, setValues] = React.useState({\n    planesize: 6000,\n    gridsize: 50,\n    gridChange: false,\n    lightR: 0.45,\n    lightG: 0.45,\n    lightB: 0.45,\n    // colorChange: false,\n  });\n\n  const handleGridChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value, gridChange: false});\n    //handle child state change\n  };\n  const handleColorChange = (prop) => (event, slidervalue) => {\n    setValues({ ...values, [prop]: slidervalue, gridChange: false});\n    //handle child state change\n  };\n\n  const handleClickGridConfirm = ()=> {\n    setValues({ ...values, gridChange: true });\n    if (props.onChange) {\n        props.onChange(values);\n      }\n  };\n\n  // const handleClickColorConfirm = ()=> {\n  //   setValues({ ...values, colorChange: true });\n  //   if (props.onChange) {\n  //       props.onChange(values);\n  //     }\n  // };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n  return (\n    <div className={classes.root}>\n      <div>\n      <Grid container direction=\"row\" alignItems=\"center\">\n        <Grid item>\n          <TextField\n                size = \"small\"\n                id=\"filled-secondary-planesize\"\n                variant=\"filled\"\n                color=\"secondary\"\n                label=\"plane size\"\n                type=\"number\"\n                defaultValue = {values.planesize}\n                onChange={handleGridChange('planesize')}\n                className={clsx(classes.margin, classes.textField)}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">inch</InputAdornment>,\n                }}\n              />\n        </Grid>\n        <Grid item>\n          <TextField\n                  size = \"small\"\n                  id=\"filled-secondary-gridsize\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"grid size\"\n                  type=\"number\"\n                  onChange={handleGridChange('gridsize')}\n                  defaultValue = {values.gridsize}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">inch</InputAdornment>,\n                  }}\n                />\n        </Grid>\n        <Grid item>\n          <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm grid\" onClick = {handleClickGridConfirm} color = {values.gridChange ? \"primary\" : \"default\" }>\n              <Confirm />\n          </Fab>\n        </Grid>\n      </Grid>\n      </div>\n      <Grid container direction=\"row\" alignItems=\"left\">\n        <Grid item>\n        <div className={classes.sliderroot}>\n        <div className={classes.slidermargin} />\n        \n        <Button size = \"small\" disabled style={{ color: \"black\" }}> Background <ColorLensIcon fontSize = \"large\"></ColorLensIcon></Button>\n          <div className={classes.slidermargin} />\n          <RedSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider 2\" defaultValue={0.45} min = {0} max = {1} step = {0.01} onChange={handleColorChange('lightR')}/>\n          <div className={classes.slidermargin} />\n          <BlueSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider 3\" defaultValue={0.45} min = {0} max = {1} step = {0.01} onChange={handleColorChange('lightG')}/>\n          <div className={classes.slidermargin} />\n          <GreenSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider 4\" defaultValue={0.45} min = {0} max = {1} step = {0.01} onChange={handleColorChange('lightB')}/>\n        </div>\n        </Grid>\n        {/* <Grid item>\n        <div className={classes.slidermargin} />\n          <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm color\" onClick = {handleClickColorConfirm} color = {values.colorChange ? \"primary\" : \"default\" }>\n              <Confirm />\n          </Fab>\n        </Grid> */}\n      </Grid>\n      <div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default GridSettings;","import React from \"react\";\nimport clsx from 'clsx';\nimport { makeStyles} from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Confirm from '@material-ui/icons/Check';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Swal from 'sweetalert2';\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    textField: {\n      width: '30ch',\n      background: \"white\",\n      borderRadius: 8,\n      opacity: 0.8,\n    },\n  }));\n  \n/**\n * Component to handle file upload. Works for image\n * uploads, but can be edited to work for any file.\n */\nconst FileUpload = props =>{\n  const classes = useStyles();\n  // State to store uploaded file\n  const [fileControl, setFile] = React.useState({\n      file: \"\",\n      confirmUpload: false,\n  });\n  const handleClickUploadConfirm = ()=> {\n    setFile({...fileControl, confirmUpload: true});\n    if (props.onChange) {\n        props.onChange(fileControl);\n      }\n  };\n  // Handles file upload event and updates state\n  function handleUpload(event) {\n    setFile({file:event.target.files[0], confirmUpload: false});\n    // Add code here to upload file to server\n    // ...\n  }\n\n  return (\n    <div className={classes.root}>\n    <div>\n    <Grid container direction=\"column\" alignItems=\"left\">\n      <Grid item>\n        <TextField\n                size = \"small\"\n                id=\"filled-secondary-planesize\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                type=\"file\"\n                defaultValue = {fileControl.file.name}\n                onChange={handleUpload}\n                className={clsx(classes.margin, classes.textField)}\n                />\n        </Grid>\n      <Grid item>\n        <div id=\"upload-states-info\">\n        <p>Filename: {fileControl.file.name}</p>\n        <p>File size: {fileControl.file.size} bytes</p>\n        </div>\n      </Grid>\n      <Grid item>\n        <div className={classes.slidermargin} />\n          <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm color\" onClick = {handleClickUploadConfirm} color = {fileControl.confirmUpload ? \"primary\" : \"default\" }>\n              <Confirm />\n          </Fab>\n     </Grid>\n    </Grid>\n\n    </div>\n    </div>\n\n  );\n}\n\nexport default FileUpload;\n","import { Engine, Scene, Color3} from '@babylonjs/core'\nimport React, { useEffect, useRef } from 'react'\n\nconst SceneComponent = (props) => {\n    const reactCanvas = useRef(null);\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    useEffect(() => {\n        if (reactCanvas.current) {\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio, { stencil: true });\n            const scene = new Scene(engine, sceneOptions);\n            scene.clearColor = new Color3(0.45, 0.45, 0.45);\n            engine.setSize(width, height);\n            if (scene.isReady()) {\n                props.onSceneReady(scene)\n            } else {\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\n            }\n            engine.runRenderLoop(() => {\n                if (typeof onRender === 'function') {\n                    onRender(scene);\n                }\n                scene.render();\n            })\n            const resize = () => {\n                const newWidth = window.innerWidth;\n                const newHeight = window.innerHeight;\n                engine.setSize(newWidth, newHeight);\n                scene.getEngine().resize();\n            }\n            if (window) {\n                window.addEventListener('resize', resize);\n            }\n            return () => {\n                scene.getEngine().dispose();\n                if (window) {\n                    window.removeEventListener('resize', resize);\n                }\n            }\n        }\n    }, [reactCanvas])\n    return (\n        <canvas  ref={reactCanvas} {...rest} />\n    );\n}\n\nexport default SceneComponent;","import React from \"react\";\nimport {\n  ArcRotateCamera,\n  Color3,\n  Vector3,\n  HemisphericLight,\n  MeshBuilder,\n  Mesh,\n  UtilityLayerRenderer,\n  PositionGizmo,\n  RotationGizmo,\n  HighlightLayer,\n} from \"@babylonjs/core\";\nimport { GridMaterial } from \"@babylonjs/materials\";\nimport SceneComponent from \"./SceneComponent\";\nimport \"./ViewPortComponent.css\";\nimport Swal from \"sweetalert2\";\nlet translategizmo = null;\nlet rotategizmo = null;\nlet utilLayer = null;\nlet highlight = null;\n\nconst ViewPortComponent = (props) => {\n  const { settingData, setSettings, addData, setAdd } = props;\n  const sceneRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const scene = sceneRef.current;\n\n    if (scene) {\n      // modify the plane, by dispose and rebuild adding to scene.\n\n      if (settingData.gridChange) {\n        console.log(\"grid change request\");\n        scene.clearColor = new Color3(\n          settingData.lightR,\n          settingData.lightG,\n          settingData.lightB\n        );\n        const prePlane = scene.getMeshByID(\"plane\");\n        const prePlaneMaterial = scene.getMaterialByID(\"groundMaterial\");\n        if (\n          prePlane._width != settingData.planesize ||\n          prePlaneMaterial.gridRatio != settingData.gridsize\n        ) {\n          prePlane.dispose();\n          prePlaneMaterial.dispose();\n          let ground = MeshBuilder.CreateGround(\n            \"plane\",\n            { width: settingData.planesize, height: settingData.planesize },\n            scene\n          );\n          let groundMaterial = new GridMaterial(\"groundMaterial\", scene);\n          groundMaterial.majorUnitFrequency = 10;\n          groundMaterial.minorUnitVisibility = 0.5;\n          groundMaterial.gridRatio = settingData.gridsize; //smallest block size\n          groundMaterial.backFaceCulling = false;\n          groundMaterial.mainColor = new Color3(1, 1, 1);\n          groundMaterial.lineColor = new Color3(1.0, 1.0, 1.0);\n          groundMaterial.opacity = 0.98;\n          ground.material = groundMaterial;\n          ground.isPickable = false;\n        }\n\n        setSettings({ ...settingData, gridChange: false });\n      }\n\n      if (addData.addnew) {\n        if (!translategizmo) {\n          utilLayer = new UtilityLayerRenderer(scene);\n          // Create the gizmo and attach to the sphere\n          translategizmo = new PositionGizmo(utilLayer);\n          rotategizmo = new RotationGizmo(utilLayer);\n\n          highlight = new HighlightLayer(scene);\n        } else {\n          translategizmo.attachedMesh = null;\n          translategizmo.dispose();\n          rotategizmo.dispose();\n          utilLayer.dispose();\n          highlight.dispose();\n          utilLayer = new UtilityLayerRenderer(scene);\n          // Create the gizmo and attach to the sphere\n          translategizmo = new PositionGizmo(utilLayer);\n          rotategizmo = new RotationGizmo(utilLayer);\n          highlight = new HighlightLayer(scene);\n        }\n\n        translategizmo.attachedMesh = null;\n        // Keep the gizmo fixed to world rotation\n        translategizmo.updateGizmoRotationToMatchAttachedMesh = false;\n        translategizmo.updateGizmoPositionToMatchAttachedMesh = true;\n        rotategizmo.updateGizmoRotationToMatchAttachedMesh = false;\n        rotategizmo.updateGizmoPositionToMatchAttachedMesh = true;\n\n        scene.onPointerDown = function (evt, pickResult) {\n          // We try to pick an object\n\n          if (pickResult.hit) {\n            highlight.removeAllMeshes();\n            translategizmo.attachedMesh = pickResult.pickedMesh;\n            rotategizmo.attachedMesh = pickResult.pickedMesh;\n            highlight.addMesh(pickResult.pickedMesh, Color3.Magenta());\n          } else {\n            translategizmo.attachedMesh = null;\n            rotategizmo.attachedMesh = null;\n            highlight.removeAllMeshes();\n          }\n        };\n        console.log(\"add new prime request\");\n        if (addData.primetype == \"BOX\") {\n          const preBox = scene.getMeshByID(addData.primename);\n          if (preBox) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preBox.dispose();\n                let box = MeshBuilder.CreateBox(\n                  addData.primename,\n                  { size: 1 },\n                  scene\n                );\n                box.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                box.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n            // alert('Reminder: are you going to make changes to existing prime, name : ' + addData.primename + ' ?')\n          } else {\n            let box = MeshBuilder.CreateBox(\n              addData.primename,\n              { size: 1 },\n              scene\n            );\n            box.isPickable = true;\n            box.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            box.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        } else if (addData.primetype == \"SPHERE\") {\n          console.log(\"sphere\");\n          const preSphere = scene.getMeshByID(addData.primename);\n          if (preSphere) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preSphere.dispose();\n                let sphere = MeshBuilder.CreateSphere(\n                  addData.primename,\n                  { size: 1 },\n                  scene\n                );\n                sphere.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                sphere.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n          } else {\n            let sphere = MeshBuilder.CreateSphere(\n              addData.primename,\n              { size: 1 },\n              scene\n            );\n            sphere.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            sphere.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        } else if (addData.primetype == \"CYLINDER\") {\n          const preCylinder = scene.getMeshByID(addData.primename);\n          if (preCylinder) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preCylinder.dispose();\n\n                let cylinder = MeshBuilder.CreateCylinder(\n                  addData.primename,\n                  { size: 1 },\n                  scene\n                );\n                cylinder.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                cylinder.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n            // alert('Reminder: are you going to make changes to existing prime, name : ' + addData.primename + ' ?')\n          } else {\n            let cylinder = MeshBuilder.CreateCylinder(\n              addData.primename,\n              { size: 1 },\n              scene\n            );\n            cylinder.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            cylinder.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        } else if (addData.primetype == \"POLYHYDRON\") {\n          const prePolyhedron = scene.getMeshByID(addData.primename);\n          if (prePolyhedron) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                prePolyhedron.dispose();\n                let polyhedron = Mesh.CreatePolyhedron(\n                  addData.primename,\n                  { type: addData.polyhydrontype, size: 1 },\n                  scene\n                );\n                polyhedron.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                polyhedron.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n            // alert('Reminder: are you going to make changes to existing prime, name : ' + addData.primename + ' ?')\n          } else {\n            let polyhedron = Mesh.CreatePolyhedron(\n              addData.primename,\n              { type: addData.polyhydrontype, size: 1 },\n              scene\n            );\n            polyhedron.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            polyhedron.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        }\n      }\n    }\n  }, [settingData, addData]);\n\n  const onSceneReady = (scene) => {\n    sceneRef.current = scene;\n\n    // This creates and positions a free camera (non-mesh)\n    let camera = new ArcRotateCamera(\n      \"mainCamera\",\n      0,\n      0,\n      10,\n      new Vector3(0, 0, 0),\n      scene\n    );\n    // This targets the camera to scene origin\n    camera.setPosition(new Vector3(0, 500, -600));\n    const canvas = scene.getEngine().getRenderingCanvas();\n    // This attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    let light = new HemisphericLight(\"light\", new Vector3(0, 500, 0), scene);\n    // Default intensity is 1. Let's dim the light a small amount\n    light.intensity = 0.7;\n    // initial ground\n    let ground = MeshBuilder.CreateGround(\n      \"plane\",\n      { width: settingData.planesize, height: settingData.planesize },\n      scene\n    );\n    let groundMaterial = new GridMaterial(\"groundMaterial\", scene);\n    groundMaterial.majorUnitFrequency = 10;\n    groundMaterial.minorUnitVisibility = 0.5;\n    groundMaterial.gridRatio = settingData.gridsize; //smallest block size\n    groundMaterial.backFaceCulling = false;\n    groundMaterial.mainColor = new Color3(1, 1, 1);\n    groundMaterial.lineColor = new Color3(1.0, 1.0, 1.0);\n    groundMaterial.opacity = 0.98;\n    ground.material = groundMaterial;\n    ground.isPickable = false;\n  };\n  /**\n   * Will run on every frame render.  We are spinning the box on y-axis.\n   */\n  const onRender = (scene) => {\n    // if (settingData.planesize !== ground.width){\n    // console.log(ground.material.width)\n    // }\n    // if (ground !== undefined) {\n    //   var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n    //   const rpm = 10;\n    //   ground.rotation.y += ((rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000));\n    // }\n  };\n\n  return (\n    <SceneComponent\n      antialias\n      onSceneReady={onSceneReady}\n      onRender={onRender}\n      id=\"viewport\"\n    ></SceneComponent>\n  );\n};\n\nexport default ViewPortComponent;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 'fit-content',\n    border: `1px solid ${theme.palette.divider}`,\n    // borderRadius: theme.shape.borderRadius,\n    backgroundColor: theme.palette.background.paper,\n    color: theme.palette.text.secondary,\n    '& svg': {\n      margin: theme.spacing(1.5),\n    },\n    '& hr': {\n      margin: theme.spacing(0, 0.5),\n    },\n  },\n}));\n\nconst ScaleLine = props => {\n// export default function VerticalDividers() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Grid container alignItems=\"left\" className={classes.root}>\n              plane:\n        <Divider orientation=\"vertical\" flexItem />\n                {props.children.planesize}\n        <Divider orientation=\"vertical\" flexItem />\n              grid:  \n        <Divider orientation=\"vertical\" flexItem />\n            {props.children.gridsize}\n      </Grid>\n    </div>\n  );\n}\nexport default ScaleLine;","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles} from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Confirm from '@material-ui/icons/Check';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Swal from 'sweetalert2';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    textField: {\n      width: '16ch',\n      background: \"white\",\n      borderRadius: 8,\n      opacity: 0.8,\n    },\n  }));\n\n  const AddComponent = props =>  {\n    const classes = useStyles();\n    const [primeData, setPrime] = React.useState({\n        primetype: '',\n        primename: '',\n        polyhydrontype: null,\n        addnew: false,\n        positionx: null,\n        positiony: null,\n        positionz: null,\n        scalex: null,\n        scaley: null,\n        scalez: null,\n      });\n    \n      const handlePrimeChange = (event) => {\n        const name = event.target.name;\n        const eventvalue = event.target.value\n        if (event.target.value == 'POLYHYDRON'){\n          // console.log('found')\n\n          \n          (async () => {\n            console.log('selected Polyhydron, now choose type')\n            const { value: Polyhydrons } = await Swal.fire({\n              position: 'top',\n              background: 'black',\n              input: 'select',\n              inputOptions: {\n                'Polyhydrons': {\n                  0: 'Tetrahedron',\n                  1: 'Octahedron',\n                  2: 'Dodecahedron',\n                  3: 'Icosahedron',\n                  4: 'Rhombicuboctahedron',\n                  5: 'Triangular Prism',\n                  6: 'Pentagonal Prism',\n                  7: 'HexagonalPrism',\n                  8: 'Square Pyramid (J1)',\n                  9: 'Pentagonal Pyramid (J2)', \n                  10: 'Triangular Dipyramid (J12)', \n                  11: 'Pentagonal Dipyramid (J13)',\n                  12: 'Elongated Square Dipyramid (J15)',\n                  13: 'Elongated Pentagonal Dipyramid (J16)', \n                  14: 'Elongated Pentagonal Cupola (J20)', \n                },\n              },\n              inputPlaceholder: 'Select a Polyhydron',\n              showCancelButton: true,\n              inputValidator: (value) => {\n                return new Promise((resolve) => {\n                  resolve()\n                })\n              }\n            })\n            if (Polyhydrons) {\n              Swal.fire({\n                background: \"black\",\n                icon: 'success',\n                text: 'Selected',\n                showConfirmButton: false,\n                timer: 1500,\n              })\n              setPrime({ ...primeData, primetype: eventvalue, polyhydrontype: Polyhydrons, addnew:false});\n            }\n            })()\n        } else {\n        setPrime({ ...primeData, [name]: event.target.value, polyhydrontype: null, addnew:false});}\n  \n        //handle child state change\n      };\n  \n      const handlePositionChange = (prop) => (event) => {\n        setPrime({ ...primeData, [prop]: event.target.value, addnew: false});\n        //handle child state change\n      };\n\n      const handleClickAddConfirm = ()=> {\n        setPrime({ ...primeData, addnew: true });\n        if (props.onChange) {\n            props.onChange(primeData);\n \n          }\n      };\n    return (\n      <div>\n        <div className = {classes.margin}></div>\n        <Grid container direction=\"row\" alignItems=\"center\">\n          <Grid item>\n          <FormControl size=\"small\" variant=\"filled\" className={classes.textField}>\n            <InputLabel htmlFor=\"filled-age-native-simple\">+ Primes</InputLabel>\n            <Select\n              native\n              value={primeData.primetype}\n              onChange={handlePrimeChange}\n              inputProps={{\n                name: 'primetype',\n                id: 'filled-primes-native-simple',\n              }}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={'BOX'}>BOX</option>\n              <option value={'SPHERE'}>SPHERE</option>\n              <option value={'CYLINDER'}>CYLINDER</option>\n              <option value={'POLYHYDRON'}>POLYHYDRON</option>\n            </Select>\n          </FormControl>\n          </Grid>\n          <Grid item>\n          <Button size = \"small\" disabled style={{ color: \"black\" }}> All Fields Required</Button>\n        </Grid>\n        </Grid>\n        <div>\n      <Grid container direction=\"row\" alignItems=\"left\">\n\n      <Grid item>\n      <Grid container direction=\"column\" alignItems=\"left\">\n          <Grid item>\n          <TextField\n                size = \"small\"\n                id=\"filled-secondary-name\"\n                variant=\"filled\"\n                color=\"secondary\"\n                label=\"object name\"\n                type=\"string\"\n                // defaultValue = {values.planesize}\n                onChange={handlePositionChange('primename')}\n                className={clsx(classes.margin, classes.textField)}\n                InputProps={{\n                  // startAdornment: <InputAdornment position=\"start\">required:</InputAdornment>,\n                }}\n              />\n          </Grid>\n          <Grid item>\n            <TextField\n                  size = \"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  // defaultValue = {values.planesize}\n                  onChange={handlePositionChange('positionx')}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">X:</InputAdornment>,\n                  }}\n                />\n          </Grid>\n          <Grid item>\n            <TextField\n                    size = \"small\"\n                    id=\"filled-secondary-y\"\n                    variant=\"filled\"\n                    color=\"secondary\"\n                    label=\"center position\"\n                    type=\"number\"\n                    onChange={handlePositionChange('positiony')}\n                  //   defaultValue = {values.gridsize}\n                    className={clsx(classes.margin, classes.textField)}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">Y:</InputAdornment>,\n                    }}\n                  />\n          </Grid>\n          <Grid item>\n          <TextField\n                  size = \"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange('positionz')}\n                //   defaultValue = {values.gridsize}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">Z:</InputAdornment>,\n                  }}\n                />\n        </Grid>\n        </Grid>\n        </Grid>\n\n\n        <Grid item>\n      <Grid container direction=\"column\" alignItems=\"left\">\n          <Grid item>\n            <TextField\n                  size = \"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-x\"\n                  type=\"number\"\n                  // defaultValue = {values.planesize}\n                  onChange={handlePositionChange('scalex')}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">X:</InputAdornment>,\n                  }}\n                />\n            </Grid>\n            <Grid item>\n            <TextField\n                    size = \"small\"\n                    id=\"filled-secondary-y\"\n                    variant=\"filled\"\n                    color=\"secondary\"\n                    label=\"scale-y\"\n                    type=\"number\"\n                    onChange={handlePositionChange('scaley')}\n                  //   defaultValue = {values.gridsize}\n                    className={clsx(classes.margin, classes.textField)}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">Y:</InputAdornment>,\n                    }}\n                  />\n            </Grid>\n            <Grid item>\n            <TextField\n                    size = \"small\"\n                    id=\"filled-secondary-z\"\n                    variant=\"filled\"\n                    color=\"secondary\"\n                    label=\"scale-z\"\n                    type=\"number\"\n                    onChange={handlePositionChange('scalez')}\n                  //   defaultValue = {values.gridsize}\n                    className={clsx(classes.margin, classes.textField)}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">Z:</InputAdornment>,\n                    }}\n                  />\n            </Grid>\n            <div className = {classes.margin}></div>\n            <Grid item>\n            <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm grid\" onClick = {handleClickAddConfirm} color = {primeData.addnew ? \"primary\" : \"default\" }>\n                  <Confirm />\n              </Fab>\n            </Grid>\n            </Grid>\n        </Grid>\n        </Grid>\n                  \n\n\n        \n\n      </div>\n      </div>\n    );\n  }\n  \n\n  export default AddComponent;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SetIcon from '@material-ui/icons/TuneTwoTone';\nimport DownloadIcon from '@material-ui/icons/GetAppRounded';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Setting from './settingtable/SettingComponent';\nimport Upload from './uploadtable/UploadComponent';\nimport ViewPort from './viewer/ViewPortComponent';\nimport './ViewWithControl.css'\nimport Scaleline from './viewer/ScalelineComponent';\nimport Add from './addtable/AddComponent';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      marginRight: theme.spacing(2),\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function FloatingActionButtons() {\n  const classes = useStyles();\n\n\n  const [settingData, setSettings] = React.useState( {\n    planesize: 6000,\n    gridsize: 50,\n    gridChange: false,\n    confirmed: false,\n    lightR: 0.45,\n    lightG: 0.45,\n    lightB: 0.45,\n  } );\n  \n  const [addData, setAdd] = React.useState({\n    primetype: '',\n    primename: '',\n    addnew: false,\n    positionx: null,\n    positiony: null,\n    positionz: null,\n    scalex: null,\n    scaley: null,\n    scalez: null,\n  });\n\n  const changeAdd = data => {\n    if (data.primetype != addData.primetype || data.primename != addData.primename || data.positionx != addData.positionx || data.positiony != addData.positiony || data.positionz != addData.positionz || data.scalex != addData.scalex || data.scalez != addData.scalez || data.scaley != addData.scaley){\n    // if (data.gridChange){\n      setAdd({ ...data, addnew:true})\n  } \n\n  };\n\n\n  const changeSettings = data => {\n    if ((data.planesize != settingData.planesize || data.gridsize != settingData.gridsize || data.lightR != settingData.lightR || data.lightB != settingData.lightB || data.lightG != settingData.lightG)){\n    // if (data.gridChange){\n      console.log('a grid change happened')\n      setSettings({ ...data, gridChange: true})\n  }    \n    else{\n    console.log('no change needed')\n    }\n\n  };\n  const [values, setValues] = React.useState({\n    showAdd: false,\n    showSettings: false,\n    showEdit: false,\n    showImport: false,\n  });\n \n\n  const handleSettingClick = () => {\n    setValues({ showImport: false, showEdit: false, showAdd: false, showSettings: !values.showSettings });\n  };\n  const handleAddClick = () => {\n    setValues({ showImport: false, showEdit: false, showAdd: !values.showAdd, showSettings: false });\n  };\n\n  const handleImportClick = () => {\n    setValues({ showEdit: false, showAdd: false, showSettings: false, showImport: !values.showImport });\n  };\n  return (\n    \n    <div>\n      <div className = {classes.root}>\n      <div className = \"Navigation\">\n      <Fab  size=\"small\"  color = {values.showSettings ? \"primary\" : \"default\" } onClick={handleSettingClick} >\n        <SetIcon  aria-label=\"setting\"/>\n      </Fab>\n      <Fab size=\"small\"  aria-label=\"add\" color = {values.showAdd ? \"primary\" : \"default\" } onClick={handleAddClick}>\n        <AddIcon />\n      </Fab>\n      <Fab size=\"small\" aria-label=\"import\" color = {values.showImport ? \"primary\" : \"default\" } onClick={handleImportClick}>\n        <FontAwesomeIcon icon={faFileUpload} size=\"lg\"/>\n      </Fab>\n      <Fab size=\"small\"  aria-label=\"edit\">\n        <EditIcon />\n      </Fab>\n      <Fab size=\"small\"  aria-label=\"delete\">\n        <DeleteIcon />\n      </Fab>\n      <Fab size=\"small\" aria-label=\"download\">\n        <DownloadIcon />\n      </Fab>\n      {values.showSettings && <div className =\"SettingTable\"><Setting onChange={changeSettings}></Setting></div>}\n      {values.showAdd && <div className =\"AddTable\"><Add onChange={changeAdd} ></Add></div>}\n      {values.showImport && <div className =\"UploadTable\"><Upload></Upload></div>}\n      </div>\n    </div>\n      <div className = \"BottomView\">\n      <ViewPort settingData = {settingData} setSettings = {setSettings} addData = {addData} setAdd = {setAdd}/>\n      </div>\n      <div className =\"Scaleline\"><Scaleline>{settingData}</Scaleline></div>\n    </div>\n\n  );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\nfunction handleClick(event) {\n  event.preventDefault();\n  window.open(\"https://www.muyangguo.xyz/\", \"_blank\");\n}\n\n\nexport default function SimpleBreadcrumbs() {\n  return (\n    <Breadcrumbs aria-label=\"breadcrumb\">\n      <Typography color=\"textPrimary\">Prototype V1</Typography>\n      <Link color=\"inherit\" href=\"https://www.muyangguo.xyz\" onClick={handleClick}>@Muyang Guo\n      </Link>\n    </Breadcrumbs>\n  );\n}","import React from 'react';\nimport View from './components/controllerview/ViewWithControl';\nimport './components/controllerview/ViewWithControl.css';\nimport Footer from './components/footer/FooterComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <View></View>\n      <div className = \"Footer\">\n      <Footer></Footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}