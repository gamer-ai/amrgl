{"version":3,"sources":["components/controllerview/settingtable/SettingComponent.js","components/controllerview/uploadtable/UploadComponent.js","components/controllerview/builtintable/BuiltInComponent.js","components/controllerview/viewer/SceneComponent.js","components/controllerview/viewer/ViewPortComponent.js","components/controllerview/externaltable/ExternalComponent.js","components/controllerview/viewer/ScalelineComponent.js","components/controllerview/addtable/AddComponent.js","components/controllerview/ViewWithControl.js","components/footer/FooterComponent.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","sliderroot","width","spacing","slidermargin","height","margin","marginTop","marginRight","textField","background","borderRadius","opacity","RedSlider","withStyles","root","color","thumb","backgroundColor","border","marginLeft","boxShadow","active","valueLabel","left","track","rail","Slider","GreenSlider","BlueSlider","GridSettings","props","classes","React","useState","planesize","gridsize","gridChange","lightR","lightG","lightB","values","setValues","handleGridChange","prop","event","target","value","handleColorChange","slidervalue","className","Grid","container","direction","alignItems","item","TextField","size","id","variant","label","type","defaultValue","onChange","clsx","InputProps","startAdornment","InputAdornment","position","Fab","aria-label","onClick","Button","disabled","style","fontSize","valueLabelDisplay","min","max","step","textFieldtop","BuiltInComponent","builtintype","builtinname","builtinnew","positionx","positiony","positionz","scalex","scaley","scalez","rotationx","rotationy","rotationz","builtinData","setBuiltin","handlePositionChange","FormControl","InputLabel","htmlFor","Select","native","name","inputProps","Swal","fire","icon","text","SceneComponent","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","window","innerWidth","innerHeight","useEffect","current","engine","Engine","stencil","scene","Scene","clearColor","Color3","setSize","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","newWidth","newHeight","getEngine","addEventListener","dispose","removeEventListener","ref","translategizmo","rotategizmo","utilLayer","highlight","degree_to_radians","degrees","Math","PI","ViewPortComponent","settingData","setSettings","addData","setAdd","fileControl","setFileControl","libraryData","externalData","setExternal","assetManagerData","sceneRef","setAssetManager","attachedMesh","UtilityLayerRenderer","PositionGizmo","RotationGizmo","HighlightLayer","updateGizmoRotationToMatchAttachedMesh","updateGizmoPositionToMatchAttachedMesh","onPointerDown","evt","pickResult","hit","console","log","pickedMesh","meshes","length","removeAllMeshes","parent","switchtoparent","getChildMeshes","addMesh","Magenta","prePlane","getMeshByID","prePlaneMaterial","getMaterialByID","_width","gridRatio","ground","MeshBuilder","CreateGround","groundMaterial","GridMaterial","majorUnitFrequency","minorUnitVisibility","backFaceCulling","mainColor","lineColor","material","isPickable","fileadd","file","TransformNode","SceneLoader","ImportMesh","newMeshes","forEach","mesh","scaling","Vector3","preShelf","getNodeByID","showDenyButton","allowOutsideClick","confirmButtonText","denyButtonText","then","result","isConfirmed","showConfirmButton","timer","selectedBuiltin","Number","rotation","isDenied","preWall","wall","CreateBox","depth","preFloor","floor","externalnew","preExternal","externalname","selectedExternal","onBeforeOpen","showLoading","onAfterClose","hideLoading","allowEscapeKey","allowEnterKey","ImportMeshAsync","externalurl","a","Promise","all","map","close","addnew","primetype","preBox","primename","box","preSphere","sphere","CreateSphere","preCylinder","cylinder","CreateCylinder","prePolyhedron","polyhedron","Mesh","CreatePolyhedron","polyhydrontype","camera","ArcRotateCamera","setPosition","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","ExternalComponent","externaltype","files","palette","divider","paper","secondary","ScaleLine","Divider","orientation","flexItem","children","AddComponent","primeData","setPrime","eventvalue","input","inputOptions","Polyhydrons","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","inputPlaceholder","showCancelButton","inputValidator","resolve","fontsize","extendedIcon","FloatingActionButtons","confirmed","buultintype","showAdd","showSettings","showEdit","showImport","showLibrary","showAssetManager","faFileUpload","data","component","FormHelperText","FormGroup","FormControlLabel","control","Switch","checked","handleClick","preventDefault","open","SimpleBreadcrumbs","Breadcrumbs","Typography","Link","href","App","ReactDOM","document","getElementById"],"mappings":"yhBAgBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,WAAY,CACVC,MAAO,IAAyB,EAAnBF,EAAMG,QAAQ,IAE7BC,aAAc,CACZC,OAAQL,EAAMG,QAAQ,IAExBG,OAAQ,CACNC,UAAWP,EAAMG,QAAQ,GACzBK,YAAaR,EAAMG,QAAQ,IAE7BM,UAAW,CACTP,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,QAIPC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,MACPX,OAAQ,GAEVY,MAAO,CACLZ,OAAQ,GACRH,MAAO,GACPgB,gBAAiB,OACjBC,OAAQ,yBACRZ,WAAY,EACZa,YAAa,GACb,6BAA8B,CAC5BC,UAAW,YAGfC,OAAQ,GACRC,WAAY,CACVC,KAAM,oBAERC,MAAO,CACLpB,OAAQ,EACRM,aAAc,GAEhBe,KAAM,CACJrB,OAAQ,EACRM,aAAc,IA1BAG,CA4Bfa,KAEGC,EAAcd,YAAW,CAC7BC,KAAM,CACJC,MAAO,QACPX,OAAQ,GAEVY,MAAO,CACLZ,OAAQ,GACRH,MAAO,GACPgB,gBAAiB,OACjBC,OAAQ,yBACRZ,WAAY,EACZa,YAAa,GACb,6BAA8B,CAC5BC,UAAW,YAGfC,OAAQ,GACRC,WAAY,CACVC,KAAM,oBAERC,MAAO,CACLpB,OAAQ,EACRM,aAAc,GAEhBe,KAAM,CACJrB,OAAQ,EACRM,aAAc,IA1BEG,CA4BjBa,KAEGE,EAAaf,YAAW,CAC5BC,KAAM,CACJC,MAAO,OACPX,OAAQ,GAEVY,MAAO,CACLZ,OAAQ,GACRH,MAAO,GACPgB,gBAAiB,OACjBC,OAAQ,yBACRZ,WAAY,EACZa,YAAa,GACb,6BAA8B,CAC5BC,UAAW,YAGfC,OAAQ,GACRC,WAAY,CACVC,KAAM,oBAERC,MAAO,CACLpB,OAAQ,EACRM,aAAc,GAEhBe,KAAM,CACJrB,OAAQ,EACRM,aAAc,IA1BCG,CA4BhBa,KAkHYG,EA9GM,SAAAC,GAAS,IAAD,EACrBC,EAAUlC,IADW,EAECmC,IAAMC,SAAS,CACzCC,UAAW,IACXC,SAAU,GACVC,YAAY,EACZC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MARiB,mBAEpBC,EAFoB,KAEZC,EAFY,KAYrBC,EAAmB,SAACC,GAAD,OAAU,SAACC,GAAW,IAAD,EAC5CH,EAAU,2BAAKD,GAAN,uBAAeG,EAAOC,EAAMC,OAAOC,OAAnC,4BAAsD,GAAtD,OAGLC,EAAoB,SAACJ,GAAD,OAAU,SAACC,EAAOI,GAAiB,IAAD,EAC1DP,EAAU,2BAAKD,GAAN,uBAAeG,EAAOK,GAAtB,4BAA+C,GAA/C,OAsBX,OACE,sBAAKC,UAAWlB,EAAQjB,KAAxB,UACE,8BACA,eAACoC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAA3C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACMC,KAAO,QACPC,GAAG,6BACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,aACNC,KAAK,SACLC,aAAgBrB,EAAON,UACvB4B,SAAUpB,EAAiB,aAC3BO,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eAAgB,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,uBAI1B,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACQC,KAAO,QACPC,GAAG,4BACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,YACNC,KAAK,SACLE,SAAUpB,EAAiB,YAC3BmB,aAAgBrB,EAAOL,SACvBc,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eAAgB,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,uBAI5B,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACc,EAAA,GAAD,GAAKZ,KAAK,QAAQzC,MAAQ,YAAYsD,aAAW,eAAeC,QAvDzC,WAC7B7B,EAAU,2BAAKD,GAAN,IAAcJ,YAAY,KAC/BN,EAAMgC,UACNhC,EAAMgC,SAAStB,KAoDb,sBAA4GA,EAAOJ,WAAa,UAAY,WAA5I,yBACI,cAAC,IAAD,KADJ,WAMJ,cAACc,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,OAA3C,SACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACA,sBAAKL,UAAWlB,EAAQ/B,WAAxB,UACA,qBAAKiD,UAAWlB,EAAQ5B,eAExB,eAACoE,EAAA,EAAD,CAAQf,KAAO,QAAQgB,UAAQ,EAACC,MAAO,CAAE1D,MAAO,SAAhD,yBAAuE,cAAC,IAAD,CAAe2D,SAAW,aAC/F,qBAAKzB,UAAWlB,EAAQ5B,eACxB,cAACS,EAAD,CAAW+D,kBAAkB,OAAON,aAAW,kBAAkBR,aAAc,IAAMe,IAAO,EAAGC,IAAO,EAAGC,KAAQ,IAAMhB,SAAUf,EAAkB,YACnJ,qBAAKE,UAAWlB,EAAQ5B,eACxB,cAACyB,EAAD,CAAY+C,kBAAkB,OAAON,aAAW,kBAAkBR,aAAc,IAAMe,IAAO,EAAGC,IAAO,EAAGC,KAAQ,IAAMhB,SAAUf,EAAkB,YACpJ,qBAAKE,UAAWlB,EAAQ5B,eACxB,cAACwB,EAAD,CAAagD,kBAAkB,OAAON,aAAW,kBAAkBR,aAAc,IAAMe,IAAO,EAAGC,IAAO,EAAGC,KAAQ,IAAMhB,SAAUf,EAAkB,mBAUzJ,4B,oBC3NYjD,aAAW,SAACC,GAAD,MAAY,CACrCM,OAAQ,CACNC,UAAWP,EAAMG,QAAQ,GACzBK,YAAaR,EAAMG,QAAQ,IAE7BM,UAAW,CACTP,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,Q,iBCLTd,G,OAAYC,aAAW,SAACC,GAAD,MAAY,CACvCM,OAAQ,CACNC,UAAWP,EAAMG,QAAQ,GACzBK,YAAaR,EAAMG,QAAQ,IAE7B6E,aAAc,CACZ9E,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,IAEXH,UAAW,CACTP,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,SAwSEqE,EApSU,SAAClD,GAAW,IAAD,EAC5BC,EAAUlC,IADkB,EAEAmC,IAAMC,SAAS,CAC/CgD,YAAa,GACbC,YAAa,GACbC,YAAY,EACZC,UAAW,EACXC,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,UAAW,EACXC,UAAW,EACXC,UAAW,IAdqB,mBAE3BC,EAF2B,KAEdC,EAFc,KA6B5BC,EAAuB,SAACpD,GAAD,OAAU,SAACC,GAAW,IAAD,EAChDkD,EAAW,2BAAKD,GAAN,uBAAoBlD,EAAOC,EAAMC,OAAOC,OAAxC,4BAA2D,GAA3D,OAmBZ,OACE,gCACE,qBAAKG,UAAWlB,EAAQ1B,SACxB,cAAC6C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAA3C,SACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAAC0C,EAAA,EAAD,CACExC,KAAK,QACLE,QAAQ,SACRT,UAAWlB,EAAQgD,aAHrB,UAKE,cAACkB,EAAA,EAAD,CAAYC,QAAQ,2BAApB,4CACA,eAACC,EAAA,EAAD,CACEC,QAAM,EACNtD,MAAO+C,EAAYZ,YACnBnB,SA9CgB,SAAClB,GAAW,IAAD,EAC/ByD,EAAOzD,EAAMC,OAAOwD,KACPzD,EAAMC,OAAOC,MAChCgD,EAAW,2BACJD,GADG,uBAELQ,EAAOzD,EAAMC,OAAOC,OAFf,4BAGM,GAHN,MA4CAwD,WAAY,CACVD,KAAM,cACN5C,GAAI,iCANR,UASE,wBAAQY,aAAW,OAAOvB,MAAM,KAChC,2BAAUa,MAAM,OAAhB,UACA,wBAAQb,MAAO,kBAAf,6BACA,wBAAQA,MAAO,oBAAf,kCAEA,0BAAUa,MAAM,eAAhB,SACA,wBAAQb,MAAO,2BAAf,kDAMR,8BACE,eAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,OAA3C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,wBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,cACNC,KAAK,SAELE,SAAUiC,EAAqB,eAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WACE,OAMN,cAACd,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLC,aAAgBgC,EAAYT,UAC5BtB,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAChClC,aAAgBgC,EAAYR,UAC3BpC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAChClC,aAAgBgC,EAAYP,UAC3BrC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAMR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLC,aAAgBgC,EAAYH,UAC5B5B,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAChClC,aAAgBgC,EAAYF,UAC3B1C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAChClC,aAAgBgC,EAAYD,UAC3B3C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,0BASZ,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLC,aAAgBgC,EAAYN,OAC5BzB,SAAUiC,EAAqB,UAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLE,SAAUiC,EAAqB,UAC/BlC,aAAgBgC,EAAYL,OAC5BvC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLE,SAAUiC,EAAqB,UAChClC,aAAgBgC,EAAYJ,OAC3BxC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,qBAAKlB,UAAWlB,EAAQ1B,SACxB,cAAC6C,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACc,EAAA,GAAD,GACEZ,KAAK,QACLzC,MAAM,YACNsD,aAAW,eACXC,QApPc,WACvBuB,EAAYX,aAQjBY,EAAW,2BAAKD,GAAN,IAAmBV,YAAY,KACrCrD,EAAMgC,UACRhC,EAAMgC,SAAS+B,IATbU,IAAKC,KAAK,CACN/F,WAAY,QACZgG,KAAM,OACNC,KAAM,2CA2OF,sBAKSb,EAAYV,WAAa,UAAY,WAL9C,yBAOE,cAAC,IAAD,KAPF,oB,kECrQDwB,GA5CQ,SAAC7E,GACpB,IAAM8E,EAAcC,iBAAO,MACnBC,EAAgGhF,EAAhGgF,UAAWC,EAAqFjF,EAArFiF,cAAeC,EAAsElF,EAAtEkF,mBAAoBC,EAAkDnF,EAAlDmF,aAAcC,EAAoCpF,EAApCoF,SAA2BC,GAASrF,EAA1BsF,aAFhD,aAE0EtF,EAF1E,8FAGxB7B,EAAQoH,OAAOC,WACflH,EAASiH,OAAOE,YAmCtB,OAlCAC,qBAAU,WACN,GAAIZ,EAAYa,QAAS,CACrB,IAAMC,EAAS,IAAIC,KAAOf,EAAYa,QAASX,EAAWC,EAAeC,EAAoB,CAAEY,SAAS,IAClGC,EAAQ,IAAIC,KAAMJ,EAAQT,GAChCY,EAAME,WAAa,IAAIC,KAAO,IAAM,IAAM,KAC1CN,EAAOO,QAAQhI,EAAOG,GAClByH,EAAMK,UACNpG,EAAMsF,aAAaS,GAEnBA,EAAMM,kBAAkBC,SAAQ,SAAAP,GAAK,OAAI/F,EAAMsF,aAAaS,MAEhEH,EAAOW,eAAc,WACO,oBAAbnB,GACPA,EAASW,GAEbA,EAAMS,YAEV,IAAMC,EAAS,WACX,IAAMC,EAAWnB,OAAOC,WAClBmB,EAAYpB,OAAOE,YACzBG,EAAOO,QAAQO,EAAUC,GACzBZ,EAAMa,YAAYH,UAKtB,OAHIlB,QACAA,OAAOsB,iBAAiB,SAAUJ,GAE/B,WACHV,EAAMa,YAAYE,UACdvB,QACAA,OAAOwB,oBAAoB,SAAUN,OAIlD,CAAC3B,IAEA,oCAASkC,IAAKlC,GAAiBO,KCnBnC4B,I,OAAiB,MACjBC,GAAc,KACdC,GAAY,KACZC,GAAY,KAEhB,SAASC,GAAkBC,GAEzB,OAAOA,GADEC,KAAKC,GACS,KAKzB,IAm9BeC,GAn9BW,SAACzH,GAAW,IAElC0H,EAYE1H,EAZF0H,YACAC,EAWE3H,EAXF2H,YACAC,EAUE5H,EAVF4H,QACAC,EASE7H,EATF6H,OACAC,EAQE9H,EARF8H,YACAC,EAOE/H,EAPF+H,eACAC,EAMEhI,EANFgI,YACAhE,EAKEhE,EALFgE,WACAiE,EAIEjI,EAJFiI,aACAC,EAGElI,EAHFkI,YACAC,EAEEnI,EAFFmI,iBAGIC,GADFpI,EADFqI,gBAEenI,IAAM6E,OAAO,OAE9B7E,IAAMwF,WAAU,WACd,IAAMK,EAAQqC,EAASzC,QAEvB,GAAII,EAAO,CAqDT,GAlDKkB,IAQHA,GAAeqB,aAAe,KAC9BrB,GAAeH,UACfI,GAAYJ,UACZK,GAAUL,UACVM,GAAUN,UACVK,GAAY,IAAIoB,KAAqBxC,GAErCkB,GAAiB,IAAIuB,KAAcrB,IACnCD,GAAc,IAAIuB,KAActB,IAChCC,GAAY,IAAIsB,KAAe3C,KAhB/BoB,GAAY,IAAIoB,KAAqBxC,GAErCkB,GAAiB,IAAIuB,KAAcrB,IACnCD,GAAc,IAAIuB,KAActB,IAEhCC,GAAY,IAAIsB,KAAe3C,IAcjCkB,GAAeqB,aAAe,KAE9BrB,GAAe0B,wCAAyC,EACxD1B,GAAe2B,wCAAyC,EACxD1B,GAAYyB,wCAAyC,EACrDzB,GAAY0B,wCAAyC,EAErD7C,EAAM8C,cAAgB,SAAUC,EAAKC,GAE/BA,EAAWC,KACbC,QAAQC,IAAIf,GACZc,QAAQC,IAAIH,EAAWI,WAAW5E,MAClC0E,QAAQC,IAAI,wBAAyBnD,EAAMqD,OAAOC,QAClDjC,GAAUkC,kBACNP,EAAWI,WAAWI,QAAUpB,EAAiBqB,gBACnDP,QAAQC,IAAIH,EAAWI,WAAWI,OAAOE,kBAEzCxC,GAAeqB,aAAeS,EAAWI,WAAWI,OACpDrC,GAAYoB,aAAeS,EAAWI,WAAWI,SAEjDtC,GAAeqB,aAAeS,EAAWI,WACzCjC,GAAYoB,aAAeS,EAAWI,WACtC/B,GAAUsC,QAAQX,EAAWI,WAAYjD,KAAOyD,cAGlD1C,GAAeqB,aAAe,KAC9BpB,GAAYoB,aAAe,KAC3BlB,GAAUkC,oBAGV5B,EAAYpH,WAAY,CAC1B2I,QAAQC,IAAI,uBACZnD,EAAME,WAAa,IAAIC,KACrBwB,EAAYnH,OACZmH,EAAYlH,OACZkH,EAAYjH,QAEd,IAAMmJ,EAAW7D,EAAM8D,YAAY,SAC7BC,EAAmB/D,EAAMgE,gBAAgB,kBAC/C,GACEH,EAASI,QAAUtC,EAAYtH,WAC/B0J,EAAiBG,WAAavC,EAAYrH,SAC1C,CACAuJ,EAAS9C,UACTgD,EAAiBhD,UACjB,IAAIoD,EAASC,KAAYC,aACvB,QACA,CAAEjM,MAAOuJ,EAAYtH,UAAW9B,OAAQoJ,EAAYtH,WACpD2F,GAEEsE,EAAiB,IAAIC,KAAa,iBAAkBvE,GACxDsE,EAAeE,mBAAqB,GACpCF,EAAeG,oBAAsB,GACrCH,EAAeJ,UAAYvC,EAAYrH,SACvCgK,EAAeI,iBAAkB,EACjCJ,EAAeK,UAAY,IAAIxE,KAAO,EAAG,EAAG,GAC5CmE,EAAeM,UAAY,IAAIzE,KAAO,EAAK,EAAK,GAChDmE,EAAexL,QAAU,IACzBqL,EAAOU,SAAWP,EAClBH,EAAOW,YAAa,EAGtBlD,EAAY,2BAAKD,GAAN,IAAmBpH,YAAY,KAE5C,GAAIwH,EAAYgD,QAAS,CACvB7B,QAAQC,IAAIpB,EAAYiD,MAExB,IAAI/L,EAAO,IAAIgM,KAGfC,KAAYC,WACV,GACA,0GACA,GACAnF,GACA,SAAUoF,GACRA,EAAUC,SAAQ,SAACC,GAEZA,EAAK9B,SACR8B,EAAK9B,OAASvK,MAGlBA,EAAKsM,QAAU,IAAIC,KAAQ,GAAI,EAAG,GAClCtC,QAAQC,IAAIlK,MAGhB+I,EAAe,2BAAKD,GAAN,IAAmBgD,SAAS,KAE5C,GAAI9C,EAAY3E,WAEd,GADA4F,QAAQC,IAAI,uCACmB,4BAA3BlB,EAAY7E,YAA2C,CACzD,IAAMqI,EACJzF,EAAM8D,YAAY7B,EAAY5E,cAC9B2C,EAAM0F,YAAYzD,EAAY5E,aAEhC,GADA6F,QAAQC,IAAIsC,GACRA,EACFvC,QAAQC,IAAI,gBACZzE,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAoD,EAAY5E,YACZ,KACFsI,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAETV,EAAS1E,UAKT,IAAIqF,EAAkB,IAAInB,KAG1BC,KAAYC,WACV,GACA,0GACA,GACAnF,GACA,SAAUoF,GAMRA,EAAUC,SAAQ,SAACC,GAEZA,EAAK9B,SACR8B,EAAK9B,OAAS4C,MAGlBA,EAAgBxK,GAAKqG,EAAY5E,YACjC+I,EAAgB9J,SAAW,IAAIkJ,KAC7Ba,OAAOpE,EAAY1E,WACnB8I,OAAOpE,EAAYzE,WACnB6I,OAAOpE,EAAYxE,YAErB2I,EAAgBb,QAAU,IAAIC,KAC5Ba,OAAOpE,EAAYvE,QACnB2I,OAAOpE,EAAYtE,QACnB0I,OAAOpE,EAAYrE,SAErBwI,EAAgBE,SAAW,IAAId,KAC7BlE,GAAkB+E,OAAOpE,EAAYpE,YACrCyD,GAAkB+E,OAAOpE,EAAYnE,YACrCwD,GAAkB+E,OAAOpE,EAAYlE,gBAI3CE,EAAW,2BAAKgE,GAAN,IAAmB3E,YAAY,UAEhC0I,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAIP,CACLqE,QAAQC,IAAI,sBACZ,IAAIiD,EAAkB,IAAInB,KAC1BC,KAAYC,WACV,GACA,0GACA,GACAnF,GACA,SAAUoF,GACRA,EAAUC,SAAQ,SAACC,GAEZA,EAAK9B,SACR8B,EAAK9B,OAAS4C,MAIlBA,EAAgBxK,GAAKqG,EAAY5E,YACjC+I,EAAgB9J,SAAW,IAAIkJ,KAC7Ba,OAAOpE,EAAY1E,WACnB8I,OAAOpE,EAAYzE,WACnB6I,OAAOpE,EAAYxE,YAErB2I,EAAgBb,QAAU,IAAIC,KAC5Ba,OAAOpE,EAAYvE,QACnB2I,OAAOpE,EAAYtE,QACnB0I,OAAOpE,EAAYrE,SAErBwI,EAAgBE,SAAW,IAAId,KAC7BlE,GAAkB+E,OAAOpE,EAAYpE,YACrCyD,GAAkB+E,OAAOpE,EAAYnE,YACrCwD,GAAkB+E,OAAOpE,EAAYlE,gBAI3CE,EAAW,2BAAKgE,GAAN,IAAmB3E,YAAY,WAEtC,GAA+B,mBAA3B2E,EAAY7E,YAAkC,CACvD8F,QAAQC,IAAI,iBACZ,IAAMqD,EACJxG,EAAM8D,YAAY7B,EAAY5E,cAC9B2C,EAAM0F,YAAYzD,EAAY5E,aAChC,GAAImJ,EACFtD,QAAQC,IAAI,gBACZzE,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAoD,EAAY5E,YACZ,KACFsI,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAETK,EAAQzF,UACR,IAAI0F,EAAOrC,KAAYsC,UACrBzE,EAAY5E,YACZ,CAAEjF,MAAO,IAAKG,OAAQ,IAAKoO,MAAO,IAClC3G,GAEFyG,EAAKnK,SAAW,IAAIkJ,KAClBa,OAAOpE,EAAY1E,WACnB8I,OAAOpE,EAAYzE,WACnB6I,OAAOpE,EAAYxE,YAErBgJ,EAAKlB,QAAU,IAAIC,KACjBa,OAAOpE,EAAYvE,QACnB2I,OAAOpE,EAAYtE,QACnB0I,OAAOpE,EAAYrE,SAErB6I,EAAKH,SAAW,IAAId,KAClBlE,GAAkB+E,OAAOpE,EAAYpE,YACrCyD,GAAkB+E,OAAOpE,EAAYnE,YACrCwD,GAAkB+E,OAAOpE,EAAYlE,aAEvCE,EAAW,2BAAKgE,GAAN,IAAmB3E,YAAY,UAEhC0I,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAIP,CACLqE,QAAQC,IAAI,sBACZ,IAAIsD,EAAOrC,KAAYsC,UACrBzE,EAAY5E,YACZ,CAAEjF,MAAO,IAAKG,OAAQ,IAAKoO,MAAO,IAClC3G,GAEFyG,EAAKnK,SAAW,IAAIkJ,KAClBa,OAAOpE,EAAY1E,WACnB8I,OAAOpE,EAAYzE,WACnB6I,OAAOpE,EAAYxE,YAErBgJ,EAAKlB,QAAU,IAAIC,KACjBa,OAAOpE,EAAYvE,QACnB2I,OAAOpE,EAAYtE,QACnB0I,OAAOpE,EAAYrE,SAErB6I,EAAKH,SAAW,IAAId,KAClBlE,GAAkB+E,OAAOpE,EAAYpE,YACrCyD,GAAkB+E,OAAOpE,EAAYnE,YACrCwD,GAAkB+E,OAAOpE,EAAYlE,aAGvCE,EAAW,2BAAKgE,GAAN,IAAmB3E,YAAY,WAEtC,GAA+B,qBAA3B2E,EAAY7E,YAAoC,CACzD8F,QAAQC,IAAI,kBACZ,IAAMyD,EACJ5G,EAAM8D,YAAY7B,EAAY5E,cAC9B2C,EAAM0F,YAAYzD,EAAY5E,aAChC,GAAIuJ,EACF1D,QAAQC,IAAI,gBACZzE,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAoD,EAAY5E,YACZ,KACFsI,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAETS,EAAS7F,UACT,IAAI8F,EAAQzC,KAAYsC,UACtBzE,EAAY5E,YACZ,CAAEjF,MAAO,IAAMG,OAAQ,EAAGoO,MAAO,KACjC3G,GAEF6G,EAAMvK,SAAW,IAAIkJ,KACnBa,OAAOpE,EAAY1E,WACnB8I,OAAOpE,EAAYzE,WACnB6I,OAAOpE,EAAYxE,YAErBoJ,EAAMtB,QAAU,IAAIC,KAClBa,OAAOpE,EAAYvE,QACnB2I,OAAOpE,EAAYtE,QACnB0I,OAAOpE,EAAYrE,SAErBiJ,EAAMP,SAAW,IAAId,KACnBlE,GAAkB+E,OAAOpE,EAAYpE,YACrCyD,GAAkB+E,OAAOpE,EAAYnE,YACrCwD,GAAkB+E,OAAOpE,EAAYlE,aAGvCE,EAAW,2BAAKgE,GAAN,IAAmB3E,YAAY,UAEhC0I,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAIP,CACLqE,QAAQC,IAAI,sBACZ,IAAI0D,EAAQzC,KAAYsC,UACtBzE,EAAY5E,YACZ,CAAEjF,MAAO,IAAMG,OAAQ,EAAGoO,MAAO,KACjC3G,GAEF6G,EAAMvK,SAAW,IAAIkJ,KACnBa,OAAOpE,EAAY1E,WACnB8I,OAAOpE,EAAYzE,WACnB6I,OAAOpE,EAAYxE,YAErBoJ,EAAMtB,QAAU,IAAIC,KAClBa,OAAOpE,EAAYvE,QACnB2I,OAAOpE,EAAYtE,QACnB0I,OAAOpE,EAAYrE,SAErBiJ,EAAMP,SAAW,IAAId,KACnBlE,GAAkB+E,OAAOpE,EAAYpE,YACrCyD,GAAkB+E,OAAOpE,EAAYnE,YACrCwD,GAAkB+E,OAAOpE,EAAYlE,aAEvCE,EAAW,2BAAKgE,GAAN,IAAmB3E,YAAY,WAG3C4F,QAAQC,IAAI,oBAGhB,GAAIjB,EAAa4E,YAAa,CAC5B,IAAMC,EACJ/G,EAAM8D,YAAY5B,EAAa8E,eAC/BhH,EAAM0F,YAAYxD,EAAa8E,cAEjC,GADA9D,QAAQC,IAAI4D,GACRA,EACF7D,QAAQC,IAAI,gBACZzE,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAqD,EAAa8E,aACb,KACFrB,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAETY,EAAYhG,UAEZ,IAAIkG,EAAmB,IAAIhC,KAC3BvG,IAAKC,KAAK,CACRE,KAAM,cACNjG,WAAY,QACZsO,aAHQ,WAINxI,IAAKyI,eAEPC,aANQ,WAON1I,IAAK2I,eAEPzB,mBAAmB,EACnBM,mBAAmB,EACnBoB,gBAAgB,EAChBC,eAAe,IAEjBrC,KAAYsC,gBACV,GACAtF,EAAauF,YACb,GACAzH,GAEC+F,KANH,wCAMQ,WAAgBC,GAAhB,SAAA0B,EAAA,sEACEC,QAAQC,IACZ5B,EAAO3C,OAAOwE,KAAI,SAAUvC,GACrBA,EAAK9B,SACR8B,EAAK9B,OAASyD,OAJhB,OAUJA,EAAiBrL,GAAKsG,EAAa8E,aACnCC,EAAiB3K,SAAW,IAAIkJ,KAC9Ba,OAAOnE,EAAa3E,WACpB8I,OAAOnE,EAAa1E,WACpB6I,OAAOnE,EAAazE,YAEtBwJ,EAAiB1B,QAAU,IAAIC,KAC7Ba,OAAOnE,EAAaxE,QACpB2I,OAAOnE,EAAavE,QACpB0I,OAAOnE,EAAatE,SAEtBqJ,EAAiBX,SAAW,IAAId,KAC9BlE,GAAkB+E,OAAOnE,EAAarE,YACtCyD,GAAkB+E,OAAOnE,EAAapE,YACtCwD,GAAkB+E,OAAOnE,EAAanE,aAxBpC,2CANR,uDAiCGgI,MAAK,WACJ7C,QAAQC,IAAI,aACZhB,EAAY,2BAAKD,GAAN,IAAqB4E,aAAa,KAC7CpI,IAAKoJ,gBAIA9B,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAIP,CACLqE,QAAQC,IAAI,sBAEZzE,IAAKC,KAAK,CACRE,KAAM,cACNjG,WAAY,QACZsO,aAHQ,WAINxI,IAAKyI,eAEPC,aANQ,WAON1I,IAAK2I,eAEPzB,mBAAmB,EACnBM,mBAAmB,EACnBoB,gBAAgB,EAChBC,eAAe,IAGjB,IAAIN,EAAmB,IAAIhC,KAE3BC,KAAYsC,gBAAgB,GAAItF,EAAauF,YAAa,GAAIzH,GAC3D+F,KADH,wCAEI,WAAgBC,GAAhB,SAAA0B,EAAA,6DACExE,QAAQC,IAAI,kBACZhB,EAAY,2BAAKD,GAAN,IAAqB4E,aAAa,KAF/C,SAGQa,QAAQC,IACZ5B,EAAO3C,OAAOwE,KAAI,SAAUvC,GACrBA,EAAK9B,SACR8B,EAAK9B,OAASyD,OANtB,OAWE/D,QAAQC,IAAI,mBAGZ8D,EAAiBrL,GAAKsG,EAAa8E,aAEnCC,EAAiB3K,SAAW,IAAIkJ,KAC9Ba,OAAOnE,EAAa3E,WACpB8I,OAAOnE,EAAa1E,WACpB6I,OAAOnE,EAAazE,YAEtBwJ,EAAiB1B,QAAU,IAAIC,KAC7Ba,OAAOnE,EAAaxE,QACpB2I,OAAOnE,EAAavE,QACpB0I,OAAOnE,EAAatE,SAEtBqJ,EAAiBX,SAAW,IAAId,KAC9BlE,GAAkB+E,OAAOnE,EAAarE,YACtCyD,GAAkB+E,OAAOnE,EAAapE,YACtCwD,GAAkB+E,OAAOnE,EAAanE,aA7B1C,2CAFJ,uDAoCGgI,MAAK,WACJ7C,QAAQC,IAAI,aACZhB,EAAY,2BAAKD,GAAN,IAAqB4E,aAAa,KAC7CpI,IAAKoJ,YAOb,GAAIjG,EAAQkG,OAEV,GADA7E,QAAQC,IAAI,yBACa,OAArBtB,EAAQmG,UAAoB,CAC9B,IAAMC,EACJjI,EAAM8D,YAAYjC,EAAQqG,YAC1BlI,EAAM0F,YAAY7D,EAAQqG,WAC5B,GAAID,EACFvJ,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAgD,EAAQqG,UACR,KACFvC,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAET8B,EAAOlH,UACP,IAAIoH,EAAM/D,KAAYsC,UACpB7E,EAAQqG,UACR,CAAEvM,KAAM,GACRqE,GAEFmI,EAAI7L,SAAW,IAAIkJ,KACjBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjB0K,EAAI5C,QAAU,IAAIC,KAChBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjBuK,EAAI7B,SAAW,IAAId,KACjBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,UAEpB/B,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAKP,CACL,IAAIsJ,EAAM/D,KAAYsC,UACpB7E,EAAQqG,UACR,CAAEvM,KAAM,GACRqE,GAEFmI,EAAIrD,YAAa,EACjBqD,EAAI7L,SAAW,IAAIkJ,KACjBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjB0K,EAAI5C,QAAU,IAAIC,KAChBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjBuK,EAAI7B,SAAW,IAAId,KACjBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,WAG1B,GAAyB,UAArBlG,EAAQmG,UAAuB,CACxC,IAAMI,EACJpI,EAAM8D,YAAYjC,EAAQqG,YAC1BlI,EAAM0F,YAAY7D,EAAQqG,WAC5B,GAAIE,EACF1J,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAgD,EAAQqG,UACR,KACFvC,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAETiC,EAAUrH,UACV,IAAIsH,EAASjE,KAAYkE,aACvBzG,EAAQqG,UACR,CAAEvM,KAAM,GACRqE,GAEFqI,EAAO/L,SAAW,IAAIkJ,KACpBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjB4K,EAAO9C,QAAU,IAAIC,KACnBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjByK,EAAO/B,SAAW,IAAId,KACpBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,UAEpB/B,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAIP,CACL,IAAIwJ,EAASjE,KAAYkE,aACvBzG,EAAQqG,UACR,CAAEvM,KAAM,GACRqE,GAEFqI,EAAO/L,SAAW,IAAIkJ,KACpBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjB4K,EAAO9C,QAAU,IAAIC,KACnBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjByK,EAAO/B,SAAW,IAAId,KACpBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,WAG1B,GAAyB,YAArBlG,EAAQmG,UAAyB,CAC1C,IAAMO,EACJvI,EAAM8D,YAAYjC,EAAQqG,YAC1BlI,EAAM0F,YAAY7D,EAAQqG,WAC5B,GAAIK,EACF7J,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAgD,EAAQqG,UACR,KACFvC,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAEToC,EAAYxH,UAEZ,IAAIyH,EAAWpE,KAAYqE,eACzB5G,EAAQqG,UACR,CAAEvM,KAAM,GACRqE,GAEFwI,EAASlM,SAAW,IAAIkJ,KACtBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjB+K,EAASjD,QAAU,IAAIC,KACrBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjB4K,EAASlC,SAAW,IAAId,KACtBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,UAEpB/B,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAKP,CACL,IAAI2J,EAAWpE,KAAYqE,eACzB5G,EAAQqG,UACR,CAAEvM,KAAM,GACRqE,GAEFwI,EAASlM,SAAW,IAAIkJ,KACtBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjB+K,EAASjD,QAAU,IAAIC,KACrBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjB4K,EAASlC,SAAW,IAAId,KACtBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,WAG1B,GAAyB,cAArBlG,EAAQmG,UAA2B,CAC5C,IAAMU,EACJ1I,EAAM8D,YAAYjC,EAAQqG,YAC1BlI,EAAM0F,YAAY7D,EAAQqG,WAC5B,GAAIQ,EACFhK,IAAKC,KAAK,CACRrC,SAAU,MACVuC,KACE,iDACAgD,EAAQqG,UACR,KACFvC,gBAAgB,EAChB/M,WAAY,QACZgN,mBAAmB,EACnBC,kBAAkB,UAClBC,eAAe,WACdC,MAAK,SAACC,GAEP,GAAIA,EAAOC,YAAa,CACtBvH,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,SACNqH,mBAAmB,EACnBC,MAAO,OAETuC,EAAc3H,UACd,IAAI4H,EAAaC,KAAKC,iBACpBhH,EAAQqG,UACR,CAAEnM,KAAM8F,EAAQiH,eAAgBnN,KAAM,GACtCqE,GAEF2I,EAAWrM,SAAW,IAAIkJ,KACxBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjBkL,EAAWpD,QAAU,IAAIC,KACvBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjB+K,EAAWrC,SAAW,IAAId,KACxBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,UAEpB/B,EAAOO,UAChB7H,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,oDAKP,CACL,IAAI8J,EAAaC,KAAKC,iBACpBhH,EAAQqG,UACR,CAAEnM,KAAM8F,EAAQiH,eAAgBnN,KAAM,GACtCqE,GAEF2I,EAAWrM,SAAW,IAAIkJ,KACxBa,OAAOxE,EAAQtE,WACf8I,OAAOxE,EAAQrE,WACf6I,OAAOxE,EAAQpE,YAEjBkL,EAAWpD,QAAU,IAAIC,KACvBa,OAAOxE,EAAQnE,QACf2I,OAAOxE,EAAQlE,QACf0I,OAAOxE,EAAQjE,SAEjB+K,EAAWrC,SAAW,IAAId,KACxBlE,GAAkB+E,OAAOxE,EAAQhE,YACjCyD,GAAkB+E,OAAOxE,EAAQ/D,YACjCwD,GAAkB+E,OAAOxE,EAAQ9D,aAEnC+D,EAAO,2BAAKD,GAAN,IAAekG,QAAQ,UAMpC,CAACpG,EAAaE,EAASE,EAAaE,EAAaC,EAAcE,IAsDlE,OACE,cAAC,GAAD,CACEnD,WAAS,EACTM,aAvDiB,SAACS,GACpBqC,EAASzC,QAAUI,EAGnB,IAAI+I,EAAS,IAAIC,KACf,aACA,EACA,EACA,GACA,IAAIxD,KAAQ,EAAG,EAAG,GAClBxF,GAGF+I,EAAOE,YAAY,IAAIzD,KAAQ,EAAG,KAAM,MACxC,IAAM0D,EAASlJ,EAAMa,YAAYsI,qBAEjCJ,EAAOK,cAAcF,GAAQ,GAEjB,IAAIG,KAAiB,QAAS,IAAI7D,KAAQ,EAAG,IAAK,GAAIxF,GAE5DsJ,UAAY,GAElB,IAAInF,EAASC,KAAYC,aACvB,QACA,CAAEjM,MAAOuJ,EAAYtH,UAAW9B,OAAQoJ,EAAYtH,WACpD2F,GAEEsE,EAAiB,IAAIC,KAAa,iBAAkBvE,GACxDsE,EAAeE,mBAAqB,GACpCF,EAAeG,oBAAsB,GACrCH,EAAeJ,UAAYvC,EAAYrH,SACvCgK,EAAeI,iBAAkB,EACjCJ,EAAeK,UAAY,IAAIxE,KAAO,EAAG,EAAG,GAC5CmE,EAAeM,UAAY,IAAIzE,KAAO,EAAK,EAAK,GAChDmE,EAAexL,QAAU,IACzBqL,EAAOU,SAAWP,EAClBH,EAAOW,YAAa,GAoBlBzF,SAfa,SAACW,KAgBdpE,GAAG,cCn+BH5D,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCM,OAAQ,CACNC,UAAWP,EAAMG,QAAQ,GACzBK,YAAaR,EAAMG,QAAQ,IAE7B6E,aAAc,CACZ9E,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,IAEXH,UAAW,CACTP,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,QA2VEyQ,GAvVW,SAACtP,GAAW,IAAD,EAE7BC,EAAUlC,KAFmB,EAGCmC,IAAMC,SAAS,CACjDoP,aAAc,GACdxC,aAAc,GACdS,YAAa,GACbX,aAAa,EACbvJ,UAAW,EACXC,UAAW,EACXC,UAAW,EACXC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,UAAW,EACXC,UAAW,EACXC,UAAW,IAhBsB,mBAG5BmE,EAH4B,KAGdC,EAHc,KA+B7BjE,EAAuB,SAACpD,GAAD,OAAU,SAACC,GAAW,IAAD,EAChDoH,EAAY,2BACPD,GADM,uBAERpH,EAAOC,EAAMC,OAAOC,OAFZ,6BAGI,GAHJ,OA6Bb,OACE,gCACE,qBAAKG,UAAWlB,EAAQ1B,SACxB,eAAC6C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAAC0C,EAAA,EAAD,CACExC,KAAK,QACLE,QAAQ,SACRT,UAAWlB,EAAQgD,aAHrB,UAKE,cAACkB,EAAA,EAAD,CAAYC,QAAQ,2BAApB,6BAGA,eAACC,EAAA,EAAD,CACEC,QAAM,EACNtD,MAAOiH,EAAasH,aACpBvN,SA1DiB,SAAClB,GAAW,IAAD,EAChCyD,EAAOzD,EAAMC,OAAOwD,KACPzD,EAAMC,OAAOC,MAChCkH,EAAY,2BACPD,GADM,uBAER1D,EAAOzD,EAAMC,OAAOC,OAFZ,6BAGI,GAHJ,MAwDDwD,WAAY,CACVD,KAAM,eACN5C,GAAI,kCANR,UASE,wBAAQY,aAAW,OAAOvB,MAAM,KAEhC,wBAAQA,MAAO,MAAf,4BACA,wBAAQA,MAAO,QAAf,kCAIyB,QAA9BiH,EAAasH,cACZ,cAACnO,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,wBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,mBACNC,KAAK,SACLE,SAAUiC,EAAqB,eAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQgD,cACxCf,WACE,OAQuB,UAA9B+F,EAAasH,cACZ,cAACnO,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,6BACHC,QAAQ,WACR3C,MAAM,YACN6C,KAAK,OACLC,aAAckG,EAAauF,YAAYjJ,KACvCvC,SA/EZ,SAAsBlB,GACpBoH,EAAY,2BAAID,GAAL,IAAmBuF,YAAa1M,EAAMC,OAAOyO,MAAM,GAAI3C,aAAa,MA+ErE1L,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQgD,cACxCf,WACE,UAQV,8BACE,eAACd,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,OAA3C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,wBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,cACNC,KAAK,SAELE,SAAUiC,EAAqB,gBAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WACE,OAMN,cAACd,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLC,aAAckG,EAAa3E,UAC3BtB,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAC/BlC,aAAckG,EAAa1E,UAC3BpC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAC/BlC,aAAckG,EAAazE,UAC3BrC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAMR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLC,aAAckG,EAAarE,UAC3B5B,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAC/BlC,aAAckG,EAAapE,UAC3B1C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAC/BlC,aAAckG,EAAanE,UAC3B3C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,0BAQZ,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLC,aAAckG,EAAaxE,OAC3BzB,SAAUiC,EAAqB,UAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLE,SAAUiC,EAAqB,UAC/BlC,aAAckG,EAAavE,OAC3BvC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLE,SAAUiC,EAAqB,UAC/BlC,aAAckG,EAAatE,OAC3BxC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,qBAAKlB,UAAWlB,EAAQ1B,SACxB,cAAC6C,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACc,EAAA,GAAD,GACEZ,KAAK,QACLzC,MAAM,YACNsD,aAAW,eACXC,QAxRc,WACvByF,EAAa8E,cAOhB7E,EAAY,2BAAKD,GAAN,IAAoB4E,aAAa,KACxC7M,EAAMgC,UACRhC,EAAMgC,SAASiG,IARjBxD,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,OACNC,KAAM,2CA+QE,sBAKSqD,EAAa4E,YAAc,UAAY,WALhD,yBAOE,cAAC,IAAD,KAPF,oB,mBC/VV9O,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCe,KAAM,CACJb,MAAO,cACPiB,OAAO,aAAD,OAAenB,EAAMwR,QAAQC,SAEnCvQ,gBAAiBlB,EAAMwR,QAAQ9Q,WAAWgR,MAC1C1Q,MAAOhB,EAAMwR,QAAQ7K,KAAKgL,UAC1B,QAAS,CACPrR,OAAQN,EAAMG,QAAQ,MAExB,OAAQ,CACNG,OAAQN,EAAMG,QAAQ,EAAG,UAuBhByR,GAlBG,SAAA7P,GAEhB,IAAMC,EAAUlC,KAEhB,OACE,8BACE,eAACqD,EAAA,EAAD,CAAMC,WAAS,EAACE,WAAW,OAAOJ,UAAWlB,EAAQjB,KAArD,mBAEE,cAAC8Q,GAAA,EAAD,CAASC,YAAY,WAAWC,UAAQ,IAC/BhQ,EAAMiQ,SAAS7P,UACxB,cAAC0P,GAAA,EAAD,CAASC,YAAY,WAAWC,UAAQ,IAJ1C,QAME,cAACF,GAAA,EAAD,CAASC,YAAY,WAAWC,UAAQ,IACnChQ,EAAMiQ,SAAS5P,eCpBtBtC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCM,OAAQ,CACNC,UAAWP,EAAMG,QAAQ,GACzBK,YAAaR,EAAMG,QAAQ,IAE7B6E,aAAc,CACZ9E,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,IAEXH,UAAW,CACTP,MAAO,OACPQ,WAAY,QACZC,aAAc,EACdC,QAAS,QA+VEqR,GA3VM,SAAClQ,GAAW,IAAD,EACxBC,EAAUlC,KADc,EAEAmC,IAAMC,SAAS,CAC3C4N,UAAW,GACXE,UAAW,GACXY,eAAgB,KAChBf,QAAQ,EACRxK,UAAW,EACXC,UAAW,EACXC,UAAW,EACXC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,UAAW,EACXC,UAAW,EACXC,UAAW,IAfiB,mBAEvBqM,EAFuB,KAEZC,EAFY,KAqFxBnM,EAAuB,SAACpD,GAAD,OAAU,SAACC,GAAW,IAAD,EAChDsP,EAAS,2BAAKD,GAAN,uBAAkBtP,EAAOC,EAAMC,OAAOC,OAAtC,wBAAqD,GAArD,OAmBV,OACE,gCACE,qBAAKG,UAAWlB,EAAQ1B,SACxB,cAAC6C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAA3C,SACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAAC0C,EAAA,EAAD,CACExC,KAAK,QACLE,QAAQ,SACRT,UAAWlB,EAAQgD,aAHrB,UAKE,cAACkB,EAAA,EAAD,CAAYC,QAAQ,2BAApB,4CAGA,eAACC,EAAA,EAAD,CACEC,QAAM,EACNtD,MAAOmP,EAAUpC,UACjB/L,SAvGc,SAAClB,GACzB,IAsDO,EAtDDyD,EAAOzD,EAAMC,OAAOwD,KACpB8L,EAAavP,EAAMC,OAAOC,MACN,cAAtBF,EAAMC,OAAOC,MAGf,uBAAC,8BAAAyM,EAAA,6DACCxE,QAAQC,IAAI,wCADb,SAEsCzE,IAAKC,KAAK,CAC7CrC,SAAU,MACV1D,WAAY,QACZ2R,MAAO,SACPC,aAAc,CACZC,YAAa,CACXC,EAAG,cACHC,EAAG,aACHC,EAAG,eACHC,EAAG,cACHC,EAAG,sBACHC,EAAG,mBACHC,EAAG,mBACHC,EAAG,iBACHC,EAAG,sBACHC,EAAG,0BACHC,GAAI,6BACJC,GAAI,6BACJC,GAAI,mCACJC,GAAI,uCACJC,GAAI,sCAGRC,iBAAkB,sBAClBC,kBAAkB,EAClBC,eAAgB,SAAC1Q,GACf,OAAO,IAAI0M,SAAQ,SAACiE,GAClBA,UA7BP,iBAEgBnB,EAFhB,EAESxP,SAgCNyD,IAAKC,KAAK,CACR/F,WAAY,QACZgG,KAAM,UACNC,KAAM,WACNqH,mBAAmB,EACnBC,MAAO,OAETkE,EAAS,2BACJD,GADG,IAENpC,UAAWsC,EACXxB,eAAgB2B,EAChB1C,QAAQ,MA7Cb,0CAAD,GAkDAsC,EAAS,2BACJD,GADG,uBAEL5L,EAAOzD,EAAMC,OAAOC,OAFf,+BAGU,MAHV,wBAIE,GAJF,MAgDAwD,WAAY,CACVD,KAAM,YACN5C,GAAI,+BANR,UASE,wBAAQY,aAAW,OAAOvB,MAAM,KAChC,wBAAQA,MAAO,MAAf,iBACA,wBAAQA,MAAO,SAAf,oBACA,wBAAQA,MAAO,WAAf,sBACA,wBAAQA,MAAO,aAAf,kCAKR,8BACE,eAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,OAA3C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,wBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,cACNC,KAAK,SAELE,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WACE,OAMN,cAACd,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLC,aAAcoO,EAAU7M,UACxBtB,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAC/BlC,aAAcoO,EAAU5M,UACxBpC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,kBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAC/BlC,aAAcoO,EAAU3M,UACxBrC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAMR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLC,aAAgBoO,EAAUvM,UAC1B5B,SAAUiC,EAAqB,aAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAChClC,aAAgBoO,EAAUtM,UACzB1C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,sBACNC,KAAK,SACLE,SAAUiC,EAAqB,aAChClC,aAAgBoO,EAAUrM,UACzB3C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,0BASZ,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLC,aAAcoO,EAAU1M,OACxBzB,SAAUiC,EAAqB,UAC/B9C,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLE,SAAUiC,EAAqB,UAC/BlC,aAAcoO,EAAUzM,OACxBvC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,GAAG,qBACHC,QAAQ,SACR3C,MAAM,YACN4C,MAAM,UACNC,KAAK,SACLE,SAAUiC,EAAqB,UAC/BlC,aAAcoO,EAAUxM,OACxBxC,UAAWc,YAAKhC,EAAQ1B,OAAQ0B,EAAQvB,WACxCwD,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,qBAKR,qBAAKlB,UAAWlB,EAAQ1B,SACxB,cAAC6C,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACc,EAAA,GAAD,GACEZ,KAAK,QACLzC,MAAM,YACNsD,aAAW,eACXC,QAnPc,WACvB2N,EAAUlC,WAQfmC,EAAS,2BAAKD,GAAN,IAAiBrC,QAAQ,KAC7B9N,EAAMgC,UACRhC,EAAMgC,SAASmO,IATf1L,IAAKC,KAAK,CACN/F,WAAY,QACZgG,KAAM,OACNC,KAAM,2CA0OA,sBAKSuL,EAAUrC,OAAS,UAAY,WALxC,yBAOE,cAAC,IAAD,KAPF,oB,oBC9UV/P,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCe,KAAM,CACJ,QAAS,CACPP,YAAaR,EAAMG,QAAQ,GAC3BwT,SAAU,KAGdC,aAAc,CACZpT,YAAaR,EAAMG,QAAQ,QAIhB,SAAS0T,KACtB,IAAM7R,EAAUlC,KAD8B,EAGXmC,IAAMC,SAAS,CAChDC,UAAW,IACXC,SAAU,GACVC,YAAY,EACZyR,WAAW,EACXxR,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MAVoC,mBAGvCiH,EAHuC,KAG1BC,EAH0B,OAapBzH,IAAMC,SAAS,CACvC4N,UAAW,GACXE,UAAW,GACXH,QAAQ,EACRxK,UAAW,EACXC,UAAW,EACXC,UAAW,EACXC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,UAAW,EACXC,UAAW,EACXC,UAAW,IAzBiC,mBAavC8D,EAbuC,KAa9BC,EAb8B,OA4BZ3H,IAAMC,SAAS,CAC/C6R,YAAa,GACb5O,YAAa,GACbC,YAAY,EACZC,UAAW,EACXC,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,UAAW,EACXC,UAAW,EACXC,UAAW,IAxCiC,mBA4BvCkE,EA5BuC,KA4B1BhE,EA5B0B,OA2CV9D,IAAMC,SAAS,CACjDoP,aAAc,GACdxC,aAAc,GACdS,YAAa,GACbX,aAAa,EACbvJ,UAAW,EACXC,UAAW,EACXC,UAAW,EACXC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,UAAW,EACXC,UAAW,EACXC,UAAW,IAxDiC,mBA2CvCmE,EA3CuC,KA2CzBC,EA3CyB,OA2DRhI,IAAMC,SAAS,CACnD4K,KAAM,GACND,SAAS,IA7DmC,mBA2DvChD,EA3DuC,KA2D1BC,EA3D0B,OAgJlB7H,IAAMC,SAAS,CACzC8R,SAAS,EACTC,cAAc,EACdC,UAAU,EACVC,YAAY,EACZC,aAAa,IArJ+B,mBAgJvC3R,EAhJuC,KAgJ/BC,EAhJ+B,OAwJFT,IAAMC,SAAS,CACzDmS,kBAAkB,EAClB9I,gBAAgB,IA1J4B,mBAwJvCrB,EAxJuC,KAwJrBE,EAxJqB,KAyM9C,OACE,gCACE,qBAAKlH,UAAWlB,EAAQjB,KAAxB,SACE,sBAAKmC,UAAU,aAAf,UACE,cAACmB,EAAA,EAAD,CACEZ,KAAK,QACLzC,MAAOyB,EAAOwR,aAAe,UAAY,UACzC1P,QAnDiB,WACzB7B,EAAU,CACRyR,YAAY,EACZD,UAAU,EACVF,SAAS,EACTI,aAAa,EACbH,cAAexR,EAAOwR,gBA0ClB,SAKE,cAAC,IAAD,CAAS3P,aAAW,cAEtB,cAACD,EAAA,EAAD,CACEZ,KAAK,QACLa,aAAW,MACXtD,MAAOyB,EAAOuR,QAAU,UAAY,UACpCzP,QA3Ca,WACrB7B,EAAU,CACRyR,YAAY,EACZD,UAAU,EACVE,aAAa,EACbJ,SAAUvR,EAAOuR,QACjBC,cAAc,KAiCV,SAME,cAAC,IAAD,MAEF,cAAC5P,EAAA,EAAD,CACEZ,KAAK,QACLa,aAAW,MACXtD,MAAOyB,EAAO2R,YAAc,UAAY,UACxC7P,QA1CiB,WACzB7B,EAAU,CACRwR,UAAU,EACVF,SAAS,EACTI,aAAc3R,EAAO2R,YACrBH,cAAc,EACdE,YAAY,KAgCR,SAME,cAAC,IAAD,MAEF,cAAC9P,EAAA,EAAD,CACEZ,KAAK,QACLa,aAAW,SACXtD,MAAOyB,EAAO0R,WAAa,UAAY,UACvC5P,QAzCgB,WACxB7B,EAAU,CACRwR,UAAU,EACVF,SAAS,EACTI,aAAa,EACbH,cAAc,EACdE,YAAa1R,EAAO0R,cA+BhB,SAME,cAAC,KAAD,CAAiBzN,KAAM4N,KAAc7Q,KAAK,SAG5C,cAACY,EAAA,EAAD,CAAKZ,KAAK,QAAQa,aAAW,WAA7B,SACE,cAAC,IAAD,MAGD7B,EAAOwR,cACN,qBAAK/Q,UAAU,eAAf,SACE,cAAC,EAAD,CAASa,SA3HE,SAACwQ,GAEpBA,EAAKpS,WAAasH,EAAYtH,WAC9BoS,EAAKnS,UAAYqH,EAAYrH,UAC7BmS,EAAKjS,QAAUmH,EAAYnH,QAC3BiS,EAAK/R,QAAUiH,EAAYjH,QAC3B+R,EAAKhS,QAAUkH,EAAYlH,QAE3ByI,QAAQC,IAAI,0BACZvB,EAAY,2BAAK6K,GAAN,IAAYlS,YAAY,MAEnC2I,QAAQC,IAAI,yBAmHPxI,EAAOuR,SACN,qBAAK9Q,UAAU,WAAf,SACE,cAAC,GAAD,CAAKa,SAxLC,SAACwQ,GAEfA,EAAKzE,WAAanG,EAAQmG,WAC1ByE,EAAKvE,WAAarG,EAAQqG,WAC1BuE,EAAKlP,WAAasE,EAAQtE,WAC1BkP,EAAKjP,WAAaqE,EAAQrE,WAC1BiP,EAAKhP,WAAaoE,EAAQpE,WAC1BgP,EAAK/O,QAAUmE,EAAQnE,QACvB+O,EAAK7O,QAAUiE,EAAQjE,QACvB6O,EAAK9O,QAAUkE,EAAQlE,QACvB8O,EAAK5O,WAAagE,EAAQhE,WAC1B4O,EAAK3O,WAAa+D,EAAQ/D,WAC1B2O,EAAK1O,WAAa8D,EAAQ9D,WAE1B+D,EAAO,2BAAK2K,GAAN,IAAY1E,QAAQ,UA6KrBpN,EAAO0R,YACN,qBAAKjR,UAAU,cAAf,SACE,cAAC,GAAD,CAAUa,SAzJC,SAACwQ,GAEpBA,EAAKjD,cAAgBtH,EAAasH,cAClCiD,EAAKzF,cAAgB9E,EAAa8E,cAClCyF,EAAKhF,aAAevF,EAAauF,aACjCgF,EAAKlP,WAAa2E,EAAa3E,WAC/BkP,EAAKjP,WAAa0E,EAAa1E,WAC/BiP,EAAKhP,WAAayE,EAAazE,WAC/BgP,EAAK/O,QAAUwE,EAAaxE,QAC5B+O,EAAK7O,QAAUsE,EAAatE,QAC5B6O,EAAK9O,QAAUuE,EAAavE,QAC5B8O,EAAK5O,WAAaqE,EAAarE,WAC/B4O,EAAK3O,WAAaoE,EAAapE,WAC/B2O,EAAK1O,WAAamE,EAAanE,WAG/BoE,EAAY,2BAAKsK,GAAN,IAAY3F,aAAa,UA4I/BnM,EAAO2R,aACN,qBAAKlR,UAAU,eAAf,SACE,cAAC,EAAD,CAASa,SAhLC,SAACwQ,GAEnBA,EAAKrP,aAAe6E,EAAY7E,aAChCqP,EAAKpP,aAAe4E,EAAY5E,aAChCoP,EAAKlP,WAAa0E,EAAY1E,WAC9BkP,EAAKjP,WAAayE,EAAYzE,WAC9BiP,EAAKhP,WAAawE,EAAYxE,WAC9BgP,EAAK/O,QAAUuE,EAAYvE,QAC3B+O,EAAK7O,QAAUqE,EAAYrE,QAC3B6O,EAAK9O,QAAUsE,EAAYtE,QAC3B8O,EAAK5O,WAAaoE,EAAYpE,WAC9B4O,EAAK3O,WAAamE,EAAYnE,WAC9B2O,EAAK1O,WAAakE,EAAYlE,WAE9BE,EAAW,2BAAKwO,GAAN,IAAYnP,YAAY,eAyKjC8E,EAAiBmK,kBAChB,qBAAKnR,UAAU,eAAf,SACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,OAA9C,UACE,eAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,UACA,cAACc,EAAA,EAAD,CAAKZ,KAAK,QAAQa,aAAW,OAA7B,SACE,cAAC,IAAD,MAEF,cAACD,EAAA,EAAD,CAAKZ,KAAK,QAAQa,aAAW,SAA7B,SACE,cAAC,IAAD,SAGF,cAACnB,EAAA,EAAD,CAAMI,MAAI,EAAV,SAEA,eAAC0C,EAAA,EAAD,CAAauO,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,6BACA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEC,QAAS5K,EAAiBqB,eAC1BxH,SAtHQ,WACxBqG,EAAgB,2BACXF,GADU,IAEbqB,gBAAiBrB,EAAiBqB,mBAoHpBjF,KAAK,mBAGT1C,MAAM,4BAUhB,qBAAKV,UAAU,aAAf,SACE,cAAC,GAAD,CACEuG,YAAaA,EACbC,YAAaA,EACbC,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,eAAgBA,EAChBC,YAAaA,EACbhE,WAAYA,EACZiE,aAAcA,EACdC,YAAaA,EACbC,iBAAkBA,EAClBE,gBAAiBA,MAGrB,qBAAKlH,UAAU,YAAf,SACE,cAAC,GAAD,UAAYuG,S,kCC/VpB,SAASsL,GAAYlS,GACnBA,EAAMmS,iBACN1N,OAAO2N,KAAK,6BAA8B,UAI7B,SAASC,KACtB,OACE,eAACC,GAAA,EAAD,CAAa7Q,aAAW,aAAxB,UACE,cAAC8Q,GAAA,EAAD,CAAYpU,MAAM,cAAlB,0BACA,cAACqU,GAAA,EAAD,CAAMrU,MAAM,UAAUsU,KAAK,4BAA4B/Q,QAASwQ,GAAhE,4B,OCESQ,OAXf,WACE,OACE,sBAAKrS,UAAU,MAAf,UACE,cAAC,GAAD,IACA,qBAAKA,UAAY,SAAjB,SACA,cAAC,GAAD,UCNNsS,IAASjN,OAEL,cAAC,GAAD,IAEFkN,SAASC,eAAe,W","file":"static/js/main.15a5d60b.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles} from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Confirm from '@material-ui/icons/Check';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  sliderroot: {\n    width: 100 + theme.spacing(3) * 2,\n  },\n  slidermargin: {\n    height: theme.spacing(2),\n  },\n  margin: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  textField: {\n    width: '12ch',\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n}));\n\nconst RedSlider = withStyles({\n  root: {\n    color: 'red',\n    height: 4,\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst GreenSlider = withStyles({\n  root: {\n    color: 'green',\n    height: 4,\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst BlueSlider = withStyles({\n  root: {\n    color: 'blue',\n    height: 4,\n  },\n  thumb: {\n    height: 20,\n    width: 20,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\n\n// export default function InputAdornments() {\nconst GridSettings = props =>{\n  const classes = useStyles();\n  const [values, setValues] = React.useState({\n    planesize: 6000,\n    gridsize: 50,\n    gridChange: false,\n    lightR: 0.45,\n    lightG: 0.45,\n    lightB: 0.45,\n    // colorChange: false,\n  });\n\n  const handleGridChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value, gridChange: false});\n    //handle child state change\n  };\n  const handleColorChange = (prop) => (event, slidervalue) => {\n    setValues({ ...values, [prop]: slidervalue, gridChange: false});\n    //handle child state change\n  };\n\n  const handleClickGridConfirm = ()=> {\n    setValues({ ...values, gridChange: true });\n    if (props.onChange) {\n        props.onChange(values);\n      }\n  };\n\n  // const handleClickColorConfirm = ()=> {\n  //   setValues({ ...values, colorChange: true });\n  //   if (props.onChange) {\n  //       props.onChange(values);\n  //     }\n  // };\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault();\n//   };\n\n  return (\n    <div className={classes.root}>\n      <div>\n      <Grid container direction=\"row\" alignItems=\"center\">\n        <Grid item>\n          <TextField\n                size = \"small\"\n                id=\"filled-secondary-planesize\"\n                variant=\"filled\"\n                color=\"secondary\"\n                label=\"plane size\"\n                type=\"number\"\n                defaultValue = {values.planesize}\n                onChange={handleGridChange('planesize')}\n                className={clsx(classes.margin, classes.textField)}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">inch</InputAdornment>,\n                }}\n              />\n        </Grid>\n        <Grid item>\n          <TextField\n                  size = \"small\"\n                  id=\"filled-secondary-gridsize\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"grid size\"\n                  type=\"number\"\n                  onChange={handleGridChange('gridsize')}\n                  defaultValue = {values.gridsize}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">inch</InputAdornment>,\n                  }}\n                />\n        </Grid>\n        <Grid item>\n          <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm grid\" onClick = {handleClickGridConfirm} color = {values.gridChange ? \"primary\" : \"default\" }>\n              <Confirm />\n          </Fab>\n        </Grid>\n      </Grid>\n      </div>\n      <Grid container direction=\"row\" alignItems=\"left\">\n        <Grid item>\n        <div className={classes.sliderroot}>\n        <div className={classes.slidermargin} />\n        \n        <Button size = \"small\" disabled style={{ color: \"black\" }}> Background <ColorLensIcon fontSize = \"large\"></ColorLensIcon></Button>\n          <div className={classes.slidermargin} />\n          <RedSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider 2\" defaultValue={0.45} min = {0} max = {1} step = {0.01} onChange={handleColorChange('lightR')}/>\n          <div className={classes.slidermargin} />\n          <BlueSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider 3\" defaultValue={0.45} min = {0} max = {1} step = {0.01} onChange={handleColorChange('lightB')}/>\n          <div className={classes.slidermargin} />\n          <GreenSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider 4\" defaultValue={0.45} min = {0} max = {1} step = {0.01} onChange={handleColorChange('lightG')}/>\n        </div>\n        </Grid>\n        {/* <Grid item>\n        <div className={classes.slidermargin} />\n          <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm color\" onClick = {handleClickColorConfirm} color = {values.colorChange ? \"primary\" : \"default\" }>\n              <Confirm />\n          </Fab>\n        </Grid> */}\n      </Grid>\n      <div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default GridSettings;","import React from \"react\";\nimport clsx from 'clsx';\nimport { makeStyles} from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Confirm from '@material-ui/icons/Check';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Swal from 'sweetalert2';\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    textField: {\n      width: '30ch',\n      background: \"white\",\n      borderRadius: 8,\n      opacity: 0.8,\n    },\n  }));\n  \n/**\n * Component to handle file upload. Works for image\n * uploads, but can be edited to work for any file.\n */\nconst FileUpload = props =>{\n  const classes = useStyles();\n  // State to store uploaded file\n  const [fileControl, setFile] = React.useState({\n      file: \"\",\n      confirmUpload: false,\n  });\n  const handleClickUploadConfirm = ()=> {\n    setFile({...fileControl, confirmUpload: true});\n    if (props.onChange) {\n        props.onChange(fileControl);\n      }\n  };\n  // Handles file upload event and updates state\n  function handleUpload(event) {\n    setFile({file:event.target.files[0], confirmUpload: false});\n    // Add code here to upload file to server\n    // ...\n  }\n\n  return (\n    <div className={classes.root}>\n    <div>\n    <Grid container direction=\"column\" alignItems=\"left\">\n      <Grid item>\n        <TextField\n                size = \"small\"\n                id=\"filled-secondary-planesize\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                type=\"file\"\n                defaultValue = {fileControl.file.name}\n                onChange={handleUpload}\n                className={clsx(classes.margin, classes.textField)}\n                />\n        </Grid>\n      <Grid item>\n        <div id=\"upload-states-info\">\n        <p>Filename: {fileControl.file.name}</p>\n        <p>File Size: {fileControl.file.size} bytes</p>\n        </div>\n      </Grid>\n      <Grid item>\n        <div className={classes.slidermargin} />\n          <Fab size=\"small\" color = \"secondary\" aria-label=\"confirm color\" onClick = {handleClickUploadConfirm} color = {fileControl.confirmUpload ? \"primary\" : \"default\" }>\n              <Confirm />\n          </Fab>\n     </Grid>\n    </Grid>\n\n    </div>\n    </div>\n\n  );\n}\n\nexport default FileUpload;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Confirm from \"@material-ui/icons/Check\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Swal from \"sweetalert2\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  textFieldtop: {\n    width: \"32ch\",\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n  textField: {\n    width: \"16ch\",\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n}));\n\nconst BuiltInComponent = (props) => {\n  const classes = useStyles();\n  const [builtinData, setBuiltin] = React.useState({\n    builtintype: \"\",\n    builtinname: \"\",\n    builtinnew: false,\n    positionx: 0,\n    positiony: 0,\n    positionz: 0,\n    scalex: 1,\n    scaley: 1,\n    scalez: 1,\n    rotationx: 0,\n    rotationy: 0,\n    rotationz: 0,\n  });\n\n  const handleBuiltinChange = (event) => {\n    const name = event.target.name;\n    const eventvalue = event.target.value;\n    setBuiltin({\n        ...builtinData,\n        [name]: event.target.value,\n        builtinnew: false,\n      });\n\n    //handle child state change\n  };\n\n  const handlePositionChange = (prop) => (event) => {\n    setBuiltin({ ...builtinData, [prop]: event.target.value, builtinnew: false });\n    //handle child state change\n  };\n\n  const handleClickAddConfirm = () => {\n    if (!builtinData.builtinname){\n        Swal.fire({\n            background: \"black\",\n            icon: \"info\",\n            text: \"Please assign a name for your object\",\n          });\n    }\n    else{\n    setBuiltin({ ...builtinData, builtinnew: true });\n    if (props.onChange) {\n      props.onChange(builtinData);\n    }\n    }\n  };\n  return (\n    <div>\n      <div className={classes.margin}></div>\n      <Grid container direction=\"row\" alignItems=\"center\">\n        <Grid item>\n          <FormControl\n            size=\"small\"\n            variant=\"filled\"\n            className={classes.textFieldtop}\n          >\n            <InputLabel htmlFor=\"filled-age-native-simple\">+ Models (All Fields Required)</InputLabel>\n            <Select\n              native\n              value={builtinData.builtintype}\n              onChange={handleBuiltinChange}\n              inputProps={{\n                name: \"builtintype\",\n                id: \"filled-builtins-native-simple\",\n              }}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <optgroup label=\"Base\">\n              <option value={\"Wall_100x100x10\"}>Wall 100x100x10</option>\n              <option value={\"Floor_1000x1x1000\"}>Floor 1000x1x1000</option>\n              </optgroup>\n              <optgroup label=\"Shelf System\">\n              <option value={\"Storage_Shelf_100x150x40\"}>Storage Shelf 100x150x40</option>\n              </optgroup>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <div>\n        <Grid container direction=\"row\" alignItems=\"left\">\n          <Grid item>\n            <Grid container direction=\"column\" alignItems=\"left\">\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-name\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"object name\"\n                  type=\"string\"\n                  // defaultValue = {values.planesize}\n                  onChange={handlePositionChange(\"builtinname\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={\n                    {\n                      // startAdornment: <InputAdornment position=\"start\">required:</InputAdornment>,\n                    }\n                  }\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  defaultValue = {builtinData.positionx}\n                  onChange={handlePositionChange(\"positionx\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"positiony\")}\n                 defaultValue = {builtinData.positiony}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"positionz\")}\n                 defaultValue = {builtinData.positionz}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-x (degree)\"\n                  type=\"number\"\n                  defaultValue = {builtinData.rotationx}\n                  onChange={handlePositionChange(\"rotationx\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-y (degree)\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"rotationy\")}\n                 defaultValue = {builtinData.rotationy}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-z (degree)\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"rotationz\")}\n                 defaultValue = {builtinData.rotationz}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Grid container direction=\"column\" alignItems=\"left\">\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-x\"\n                  type=\"number\"\n                  defaultValue = {builtinData.scalex}\n                  onChange={handlePositionChange(\"scalex\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-y\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"scaley\")}\n                  defaultValue = {builtinData.scaley}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-z\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"scalez\")}\n                 defaultValue = {builtinData.scalez}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <div className={classes.margin}></div>\n              <Grid item>\n                <Fab\n                  size=\"small\"\n                  color=\"secondary\"\n                  aria-label=\"confirm grid\"\n                  onClick={handleClickAddConfirm}\n                  color={builtinData.builtinnew ? \"primary\" : \"default\"}\n                >\n                  <Confirm />\n                </Fab>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default BuiltInComponent;\n","import { Engine, Scene, Color3} from '@babylonjs/core'\nimport React, { useEffect, useRef } from 'react'\n\nconst SceneComponent = (props) => {\n    const reactCanvas = useRef(null);\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    useEffect(() => {\n        if (reactCanvas.current) {\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio, { stencil: true });\n            const scene = new Scene(engine, sceneOptions);\n            scene.clearColor = new Color3(0.45, 0.45, 0.45);\n            engine.setSize(width, height);\n            if (scene.isReady()) {\n                props.onSceneReady(scene)\n            } else {\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\n            }\n            engine.runRenderLoop(() => {\n                if (typeof onRender === 'function') {\n                    onRender(scene);\n                }\n                scene.render();\n            })\n            const resize = () => {\n                const newWidth = window.innerWidth;\n                const newHeight = window.innerHeight;\n                engine.setSize(newWidth, newHeight);\n                scene.getEngine().resize();\n            }\n            if (window) {\n                window.addEventListener('resize', resize);\n            }\n            return () => {\n                scene.getEngine().dispose();\n                if (window) {\n                    window.removeEventListener('resize', resize);\n                }\n            }\n        }\n    }, [reactCanvas])\n    return (\n        <canvas  ref={reactCanvas} {...rest} />\n    );\n}\n\nexport default SceneComponent;","import React from \"react\";\n// import * as BABYLON from 'babylonjs';\n// import 'babylonjs-loaders';\nimport \"@babylonjs/loaders/OBJ\";\n\nimport {\n  ArcRotateCamera,\n  Color3,\n  Vector3,\n  HemisphericLight,\n  MeshBuilder,\n  Mesh,\n  UtilityLayerRenderer,\n  PositionGizmo,\n  RotationGizmo,\n  HighlightLayer,\n  SceneLoader,\n  TransformNode,\n  StandardMaterial,\n} from \"@babylonjs/core\";\nimport { GridMaterial } from \"@babylonjs/materials\";\nimport SceneComponent from \"./SceneComponent\";\nimport \"./ViewPortComponent.css\";\nimport Swal from \"sweetalert2\";\nlet translategizmo = null;\nlet rotategizmo = null;\nlet utilLayer = null;\nlet highlight = null;\n\nfunction degree_to_radians(degrees) {\n  var pi = Math.PI;\n  return degrees * (pi / 180);\n}\n\n\n\nconst ViewPortComponent = (props) => {\n  const {\n    settingData,\n    setSettings,\n    addData,\n    setAdd,\n    fileControl,\n    setFileControl,\n    libraryData,\n    setBuiltin,\n    externalData,\n    setExternal,\n    assetManagerData,\n    setAssetManager,\n  } = props;\n  const sceneRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const scene = sceneRef.current;\n\n    if (scene) {\n      // modify the plane, by dispose and rebuild adding to scene.\n\n      if (!translategizmo) {\n        utilLayer = new UtilityLayerRenderer(scene);\n        // Create the gizmo and attach to the sphere\n        translategizmo = new PositionGizmo(utilLayer);\n        rotategizmo = new RotationGizmo(utilLayer);\n\n        highlight = new HighlightLayer(scene);\n      } else {\n        translategizmo.attachedMesh = null;\n        translategizmo.dispose();\n        rotategizmo.dispose();\n        utilLayer.dispose();\n        highlight.dispose();\n        utilLayer = new UtilityLayerRenderer(scene);\n        // Create the gizmo and attach to the sphere\n        translategizmo = new PositionGizmo(utilLayer);\n        rotategizmo = new RotationGizmo(utilLayer);\n        highlight = new HighlightLayer(scene);\n      }\n\n      translategizmo.attachedMesh = null;\n      // Keep the gizmo fixed to world rotation\n      translategizmo.updateGizmoRotationToMatchAttachedMesh = false;\n      translategizmo.updateGizmoPositionToMatchAttachedMesh = true;\n      rotategizmo.updateGizmoRotationToMatchAttachedMesh = false;\n      rotategizmo.updateGizmoPositionToMatchAttachedMesh = true;\n\n      scene.onPointerDown = function (evt, pickResult) {\n        // We try to pick an object\n        if (pickResult.hit) {\n          console.log(assetManagerData)\n          console.log(pickResult.pickedMesh.name);\n          console.log(\"current scene meshes:\", scene.meshes.length);\n          highlight.removeAllMeshes();\n          if (pickResult.pickedMesh.parent && assetManagerData.switchtoparent) {\n            console.log(pickResult.pickedMesh.parent.getChildMeshes());\n\n            translategizmo.attachedMesh = pickResult.pickedMesh.parent;\n            rotategizmo.attachedMesh = pickResult.pickedMesh.parent;\n          } else {\n            translategizmo.attachedMesh = pickResult.pickedMesh;\n            rotategizmo.attachedMesh = pickResult.pickedMesh;\n            highlight.addMesh(pickResult.pickedMesh, Color3.Magenta());\n          }\n        } else {\n          translategizmo.attachedMesh = null;\n          rotategizmo.attachedMesh = null;\n          highlight.removeAllMeshes();\n        }\n      };\n      if (settingData.gridChange) {\n        console.log(\"grid change request\");\n        scene.clearColor = new Color3(\n          settingData.lightR,\n          settingData.lightG,\n          settingData.lightB\n        );\n        const prePlane = scene.getMeshByID(\"plane\");\n        const prePlaneMaterial = scene.getMaterialByID(\"groundMaterial\");\n        if (\n          prePlane._width != settingData.planesize ||\n          prePlaneMaterial.gridRatio != settingData.gridsize\n        ) {\n          prePlane.dispose();\n          prePlaneMaterial.dispose();\n          let ground = MeshBuilder.CreateGround(\n            \"plane\",\n            { width: settingData.planesize, height: settingData.planesize },\n            scene\n          );\n          let groundMaterial = new GridMaterial(\"groundMaterial\", scene);\n          groundMaterial.majorUnitFrequency = 10;\n          groundMaterial.minorUnitVisibility = 0.5;\n          groundMaterial.gridRatio = settingData.gridsize; //smallest block size\n          groundMaterial.backFaceCulling = false;\n          groundMaterial.mainColor = new Color3(1, 1, 1);\n          groundMaterial.lineColor = new Color3(1.0, 1.0, 1.0);\n          groundMaterial.opacity = 0.98;\n          ground.material = groundMaterial;\n          ground.isPickable = false;\n        }\n\n        setSettings({ ...settingData, gridChange: false });\n      }\n      if (fileControl.fileadd) {\n        console.log(fileControl.file);\n        //test\n        let root = new TransformNode();\n        //https://raw.githubusercontent.com/MUYANGGUO/xeogl/master/examples/models/obj/CyberCity3D/Miami_Sample.obj\n        //https://raw.githubusercontent.com/gamer-ai/amrgl/main/frontend/amrgl/src/assets/example/metal_shelf.obj\n        SceneLoader.ImportMesh(\n          \"\",\n          \"https://raw.githubusercontent.com/gamer-ai/amrgl/main/frontend/amrgl/src/assets/example/metal_shelf.obj\",\n          \"\",\n          scene,\n          function (newMeshes) {\n            newMeshes.forEach((mesh) => {\n              // leave meshes already parented to maintain model hierarchy:\n              if (!mesh.parent) {\n                mesh.parent = root;\n              }\n            });\n            root.scaling = new Vector3(10, 1, 1);\n            console.log(root);\n          }\n        );\n        setFileControl({ ...fileControl, fileadd: false });\n      }\n      if (libraryData.builtinnew) {\n        console.log(\"add new object from library request\");\n        if (libraryData.builtintype == \"Storage_Shelf_100x150x40\") {\n          const preShelf =\n            scene.getMeshByID(libraryData.builtinname) ||\n            scene.getNodeByID(libraryData.builtinname);\n          console.log(preShelf);\n          if (preShelf) {\n            console.log(\"found exist!\");\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                libraryData.builtinname +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preShelf.dispose();\n                // const preShelfShadow = scene.getMeshByID(libraryData.builtinname + \"shadow\");\n                // if (preShelfShadow){\n                //   preShelfShadow.dispose();\n                // }\n                let selectedBuiltin = new TransformNode();\n                //test : https://raw.githubusercontent.com/gamer-ai/amrgl/main/frontend/amrgl/src/assets/example/metal_shelf.obj\n                // test: https://raw.githubusercontent.com/MUYANGGUO/xeogl/master/examples/models/obj/sportsCar/sportsCar.obj\n                SceneLoader.ImportMesh(\n                  \"\",\n                  \"https://raw.githubusercontent.com/gamer-ai/amrgl/main/frontend/amrgl/src/assets/example/metal_shelf.obj\",\n                  \"\",\n                  scene,\n                  function (newMeshes) {\n                    //\n                    // let selectedBuiltInShadow = newMeshes[0];\n                    // selectedBuiltInShadow.id = libraryData.builtinname + 'shadow';\n                    //\n                    // let selectedBuiltin = newMeshes[1];\n                    newMeshes.forEach((mesh) => {\n                      // leave meshes already parented to maintain model hierarchy:\n                      if (!mesh.parent) {\n                        mesh.parent = selectedBuiltin;\n                      }\n                    });\n                    selectedBuiltin.id = libraryData.builtinname;\n                    selectedBuiltin.position = new Vector3(\n                      Number(libraryData.positionx),\n                      Number(libraryData.positiony),\n                      Number(libraryData.positionz)\n                    );\n                    selectedBuiltin.scaling = new Vector3(\n                      Number(libraryData.scalex),\n                      Number(libraryData.scaley),\n                      Number(libraryData.scalez)\n                    );\n                    selectedBuiltin.rotation = new Vector3(\n                      degree_to_radians(Number(libraryData.rotationx)),\n                      degree_to_radians(Number(libraryData.rotationy)),\n                      degree_to_radians(Number(libraryData.rotationz))\n                    );\n                  }\n                );\n                setBuiltin({ ...libraryData, builtinnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n          } else {\n            console.log(\"imported new mesh!\");\n            let selectedBuiltin = new TransformNode();\n            SceneLoader.ImportMesh(\n              \"\",\n              \"https://raw.githubusercontent.com/gamer-ai/amrgl/main/frontend/amrgl/src/assets/example/metal_shelf.obj\",\n              \"\",\n              scene,\n              function (newMeshes) {\n                newMeshes.forEach((mesh) => {\n                  // leave meshes already parented to maintain model hierarchy:\n                  if (!mesh.parent) {\n                    mesh.parent = selectedBuiltin;\n                  }\n                });\n\n                selectedBuiltin.id = libraryData.builtinname;\n                selectedBuiltin.position = new Vector3(\n                  Number(libraryData.positionx),\n                  Number(libraryData.positiony),\n                  Number(libraryData.positionz)\n                );\n                selectedBuiltin.scaling = new Vector3(\n                  Number(libraryData.scalex),\n                  Number(libraryData.scaley),\n                  Number(libraryData.scalez)\n                );\n                selectedBuiltin.rotation = new Vector3(\n                  degree_to_radians(Number(libraryData.rotationx)),\n                  degree_to_radians(Number(libraryData.rotationy)),\n                  degree_to_radians(Number(libraryData.rotationz))\n                );\n              }\n            );\n            setBuiltin({ ...libraryData, builtinnew: false });\n          }\n        } else if (libraryData.builtintype == \"Wall_100x100x10\") {\n          console.log(\"wall imported\");\n          const preWall =\n            scene.getMeshByID(libraryData.builtinname) ||\n            scene.getNodeByID(libraryData.builtinname);\n          if (preWall) {\n            console.log(\"found exist!\");\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                libraryData.builtinname +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preWall.dispose();\n                let wall = MeshBuilder.CreateBox(\n                  libraryData.builtinname,\n                  { width: 100, height: 100, depth: 10 },\n                  scene\n                );\n                wall.position = new Vector3(\n                  Number(libraryData.positionx),\n                  Number(libraryData.positiony),\n                  Number(libraryData.positionz)\n                );\n                wall.scaling = new Vector3(\n                  Number(libraryData.scalex),\n                  Number(libraryData.scaley),\n                  Number(libraryData.scalez)\n                );\n                wall.rotation = new Vector3(\n                  degree_to_radians(Number(libraryData.rotationx)),\n                  degree_to_radians(Number(libraryData.rotationy)),\n                  degree_to_radians(Number(libraryData.rotationz))\n                );\n                setBuiltin({ ...libraryData, builtinnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n          } else {\n            console.log(\"imported new mesh!\");\n            let wall = MeshBuilder.CreateBox(\n              libraryData.builtinname,\n              { width: 100, height: 100, depth: 10 },\n              scene\n            );\n            wall.position = new Vector3(\n              Number(libraryData.positionx),\n              Number(libraryData.positiony),\n              Number(libraryData.positionz)\n            );\n            wall.scaling = new Vector3(\n              Number(libraryData.scalex),\n              Number(libraryData.scaley),\n              Number(libraryData.scalez)\n            );\n            wall.rotation = new Vector3(\n              degree_to_radians(Number(libraryData.rotationx)),\n              degree_to_radians(Number(libraryData.rotationy)),\n              degree_to_radians(Number(libraryData.rotationz))\n            );\n\n            setBuiltin({ ...libraryData, builtinnew: false });\n          }\n        } else if (libraryData.builtintype == \"Floor_1000x1x1000\") {\n          console.log(\"floor imported\");\n          const preFloor =\n            scene.getMeshByID(libraryData.builtinname) ||\n            scene.getNodeByID(libraryData.builtinname);\n          if (preFloor) {\n            console.log(\"found exist!\");\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                libraryData.builtinname +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preFloor.dispose();\n                let floor = MeshBuilder.CreateBox(\n                  libraryData.builtinname,\n                  { width: 1000, height: 1, depth: 1000 },\n                  scene\n                );\n                floor.position = new Vector3(\n                  Number(libraryData.positionx),\n                  Number(libraryData.positiony),\n                  Number(libraryData.positionz)\n                );\n                floor.scaling = new Vector3(\n                  Number(libraryData.scalex),\n                  Number(libraryData.scaley),\n                  Number(libraryData.scalez)\n                );\n                floor.rotation = new Vector3(\n                  degree_to_radians(Number(libraryData.rotationx)),\n                  degree_to_radians(Number(libraryData.rotationy)),\n                  degree_to_radians(Number(libraryData.rotationz))\n                );\n\n                setBuiltin({ ...libraryData, builtinnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n          } else {\n            console.log(\"imported new mesh!\");\n            let floor = MeshBuilder.CreateBox(\n              libraryData.builtinname,\n              { width: 1000, height: 1, depth: 1000 },\n              scene\n            );\n            floor.position = new Vector3(\n              Number(libraryData.positionx),\n              Number(libraryData.positiony),\n              Number(libraryData.positionz)\n            );\n            floor.scaling = new Vector3(\n              Number(libraryData.scalex),\n              Number(libraryData.scaley),\n              Number(libraryData.scalez)\n            );\n            floor.rotation = new Vector3(\n              degree_to_radians(Number(libraryData.rotationx)),\n              degree_to_radians(Number(libraryData.rotationy)),\n              degree_to_radians(Number(libraryData.rotationz))\n            );\n            setBuiltin({ ...libraryData, builtinnew: false });\n          }\n        } else {\n          console.log(\"nothing selected\");\n        }\n      }\n      if (externalData.externalnew) {\n        const preExternal =\n          scene.getMeshByID(externalData.externalname) ||\n          scene.getNodeByID(externalData.externalname);\n        console.log(preExternal);\n        if (preExternal) {\n          console.log(\"found exist!\");\n          Swal.fire({\n            position: \"top\",\n            text:\n              \"Do you want to edit an existing object, name: \" +\n              externalData.externalname +\n              \" ?\",\n            showDenyButton: true,\n            background: \"black\",\n            allowOutsideClick: false,\n            confirmButtonText: `Confirm`,\n            denyButtonText: `Cancel`,\n          }).then((result) => {\n            /* Read more about isConfirmed, isDenied below */\n            if (result.isConfirmed) {\n              Swal.fire({\n                background: \"black\",\n                icon: \"success\",\n                text: \"Edited\",\n                showConfirmButton: false,\n                timer: 1500,\n              });\n              preExternal.dispose();\n\n              let selectedExternal = new TransformNode();\n              Swal.fire({\n                text: 'loading ...',\n                background: \"black\",\n                onBeforeOpen () {\n                  Swal.showLoading ()\n                },\n                onAfterClose () {\n                  Swal.hideLoading()\n                },\n                allowOutsideClick: false,\n                showConfirmButton: false,\n                allowEscapeKey: false,\n                allowEnterKey: false\n              })\n              SceneLoader.ImportMeshAsync(\n                \"\",\n                externalData.externalurl,\n                \"\",\n                scene\n              )\n                .then(async function (result) {\n                  await Promise.all(\n                    result.meshes.map(function (mesh) {\n                      if (!mesh.parent) {\n                        mesh.parent = selectedExternal;\n                      }\n                      // mesh.isPickable = false;\n                    })\n                  );\n\n                  selectedExternal.id = externalData.externalname;\n                  selectedExternal.position = new Vector3(\n                    Number(externalData.positionx),\n                    Number(externalData.positiony),\n                    Number(externalData.positionz)\n                  );\n                  selectedExternal.scaling = new Vector3(\n                    Number(externalData.scalex),\n                    Number(externalData.scaley),\n                    Number(externalData.scalez)\n                  );\n                  selectedExternal.rotation = new Vector3(\n                    degree_to_radians(Number(externalData.rotationx)),\n                    degree_to_radians(Number(externalData.rotationy)),\n                    degree_to_radians(Number(externalData.rotationz))\n                  );\n                })\n                .then(() => {\n                  console.log(\"imported!\");\n                  setExternal({ ...externalData,  externalnew: false });\n                  Swal.close();\n                });\n\n              //removed, need to untrack\n            } else if (result.isDenied) {\n              Swal.fire({\n                background: \"black\",\n                icon: \"info\",\n                text: \"Changes are not saved, please edit again\",\n              });\n            }\n          });\n        } else {\n          console.log(\"imported new mesh!\");\n\n          Swal.fire({\n            text: 'loading ...',\n            background: \"black\",\n            onBeforeOpen () {\n              Swal.showLoading ()\n            },\n            onAfterClose () {\n              Swal.hideLoading()\n            },\n            allowOutsideClick: false,\n            showConfirmButton: false,\n            allowEscapeKey: false,\n            allowEnterKey: false\n          })\n\n          let selectedExternal = new TransformNode();\n          //\"https://raw.githubusercontent.com/gamer-ai/amrgl/main/frontend/amrgl/src/assets/example/metal_shelf.obj\"\n          SceneLoader.ImportMeshAsync(\"\", externalData.externalurl, \"\", scene)\n            .then(\n              async function (result) {\n                console.log('is loading now')\n                setExternal({ ...externalData,  externalnew: false });\n                await Promise.all(\n                  result.meshes.map(function (mesh) {\n                    if (!mesh.parent) {\n                      mesh.parent = selectedExternal;\n                    }\n                    // mesh.isPickable = false;\n                  })\n                );\n                console.log('loading is done')\n                \n\n                selectedExternal.id = externalData.externalname;\n                // selectedExternal.isPickable = true;\n                selectedExternal.position = new Vector3(\n                  Number(externalData.positionx),\n                  Number(externalData.positiony),\n                  Number(externalData.positionz)\n                );\n                selectedExternal.scaling = new Vector3(\n                  Number(externalData.scalex),\n                  Number(externalData.scaley),\n                  Number(externalData.scalez)\n                );\n                selectedExternal.rotation = new Vector3(\n                  degree_to_radians(Number(externalData.rotationx)),\n                  degree_to_radians(Number(externalData.rotationy)),\n                  degree_to_radians(Number(externalData.rotationz))\n                );\n              }\n\n            )\n            .then(() => {\n              console.log(\"imported!\");\n              setExternal({ ...externalData,  externalnew: false });\n              Swal.close();\n            });\n            \n\n\n        }\n      }\n      if (addData.addnew) {\n        console.log(\"add new prime request\");\n        if (addData.primetype == \"BOX\") {\n          const preBox =\n            scene.getMeshByID(addData.primename) ||\n            scene.getNodeByID(addData.primename);\n          if (preBox) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preBox.dispose();\n                let box = MeshBuilder.CreateBox(\n                  addData.primename,\n                  { size: 1 },\n                  scene\n                );\n                box.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                box.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                box.rotation = new Vector3(\n                  degree_to_radians(Number(addData.rotationx)),\n                  degree_to_radians(Number(addData.rotationy)),\n                  degree_to_radians(Number(addData.rotationz))\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n            // alert('Reminder: are you going to make changes to existing prime, name : ' + addData.primename + ' ?')\n          } else {\n            let box = MeshBuilder.CreateBox(\n              addData.primename,\n              { size: 1 },\n              scene\n            );\n            box.isPickable = true;\n            box.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            box.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            box.rotation = new Vector3(\n              degree_to_radians(Number(addData.rotationx)),\n              degree_to_radians(Number(addData.rotationy)),\n              degree_to_radians(Number(addData.rotationz))\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        } else if (addData.primetype == \"SPHERE\") {\n          const preSphere =\n            scene.getMeshByID(addData.primename) ||\n            scene.getNodeByID(addData.primename);\n          if (preSphere) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preSphere.dispose();\n                let sphere = MeshBuilder.CreateSphere(\n                  addData.primename,\n                  { size: 1 },\n                  scene\n                );\n                sphere.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                sphere.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                sphere.rotation = new Vector3(\n                  degree_to_radians(Number(addData.rotationx)),\n                  degree_to_radians(Number(addData.rotationy)),\n                  degree_to_radians(Number(addData.rotationz))\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n          } else {\n            let sphere = MeshBuilder.CreateSphere(\n              addData.primename,\n              { size: 1 },\n              scene\n            );\n            sphere.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            sphere.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            sphere.rotation = new Vector3(\n              degree_to_radians(Number(addData.rotationx)),\n              degree_to_radians(Number(addData.rotationy)),\n              degree_to_radians(Number(addData.rotationz))\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        } else if (addData.primetype == \"CYLINDER\") {\n          const preCylinder =\n            scene.getMeshByID(addData.primename) ||\n            scene.getNodeByID(addData.primename);\n          if (preCylinder) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                preCylinder.dispose();\n\n                let cylinder = MeshBuilder.CreateCylinder(\n                  addData.primename,\n                  { size: 1 },\n                  scene\n                );\n                cylinder.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                cylinder.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                cylinder.rotation = new Vector3(\n                  degree_to_radians(Number(addData.rotationx)),\n                  degree_to_radians(Number(addData.rotationy)),\n                  degree_to_radians(Number(addData.rotationz))\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n            // alert('Reminder: are you going to make changes to existing prime, name : ' + addData.primename + ' ?')\n          } else {\n            let cylinder = MeshBuilder.CreateCylinder(\n              addData.primename,\n              { size: 1 },\n              scene\n            );\n            cylinder.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            cylinder.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            cylinder.rotation = new Vector3(\n              degree_to_radians(Number(addData.rotationx)),\n              degree_to_radians(Number(addData.rotationy)),\n              degree_to_radians(Number(addData.rotationz))\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        } else if (addData.primetype == \"POLYHYDRON\") {\n          const prePolyhedron =\n            scene.getMeshByID(addData.primename) ||\n            scene.getNodeByID(addData.primename);\n          if (prePolyhedron) {\n            Swal.fire({\n              position: \"top\",\n              text:\n                \"Do you want to edit an existing object, name: \" +\n                addData.primename +\n                \" ?\",\n              showDenyButton: true,\n              background: \"black\",\n              allowOutsideClick: false,\n              confirmButtonText: `Confirm`,\n              denyButtonText: `Cancel`,\n            }).then((result) => {\n              /* Read more about isConfirmed, isDenied below */\n              if (result.isConfirmed) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"success\",\n                  text: \"Edited\",\n                  showConfirmButton: false,\n                  timer: 1500,\n                });\n                prePolyhedron.dispose();\n                let polyhedron = Mesh.CreatePolyhedron(\n                  addData.primename,\n                  { type: addData.polyhydrontype, size: 1 },\n                  scene\n                );\n                polyhedron.position = new Vector3(\n                  Number(addData.positionx),\n                  Number(addData.positiony),\n                  Number(addData.positionz)\n                );\n                polyhedron.scaling = new Vector3(\n                  Number(addData.scalex),\n                  Number(addData.scaley),\n                  Number(addData.scalez)\n                );\n                polyhedron.rotation = new Vector3(\n                  degree_to_radians(Number(addData.rotationx)),\n                  degree_to_radians(Number(addData.rotationy)),\n                  degree_to_radians(Number(addData.rotationz))\n                );\n                setAdd({ ...addData, addnew: false });\n                //removed, need to untrack\n              } else if (result.isDenied) {\n                Swal.fire({\n                  background: \"black\",\n                  icon: \"info\",\n                  text: \"Changes are not saved, please edit again\",\n                });\n              }\n            });\n            // alert('Reminder: are you going to make changes to existing prime, name : ' + addData.primename + ' ?')\n          } else {\n            let polyhedron = Mesh.CreatePolyhedron(\n              addData.primename,\n              { type: addData.polyhydrontype, size: 1 },\n              scene\n            );\n            polyhedron.position = new Vector3(\n              Number(addData.positionx),\n              Number(addData.positiony),\n              Number(addData.positionz)\n            );\n            polyhedron.scaling = new Vector3(\n              Number(addData.scalex),\n              Number(addData.scaley),\n              Number(addData.scalez)\n            );\n            polyhedron.rotation = new Vector3(\n              degree_to_radians(Number(addData.rotationx)),\n              degree_to_radians(Number(addData.rotationy)),\n              degree_to_radians(Number(addData.rotationz))\n            );\n            setAdd({ ...addData, addnew: false });\n          }\n          //Added, need to track\n        }\n      }\n    }\n  }, [settingData, addData, fileControl, libraryData, externalData, assetManagerData]);\n\n  const onSceneReady = (scene) => {\n    sceneRef.current = scene;\n\n    // This creates and positions a free camera (non-mesh)\n    let camera = new ArcRotateCamera(\n      \"mainCamera\",\n      0,\n      0,\n      10,\n      new Vector3(0, 0, 0),\n      scene\n    );\n    // This targets the camera to scene origin\n    camera.setPosition(new Vector3(0, 500, -600));\n    const canvas = scene.getEngine().getRenderingCanvas();\n    // This attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    let light = new HemisphericLight(\"light\", new Vector3(0, 500, 0), scene);\n    // Default intensity is 1. Let's dim the light a small amount\n    light.intensity = 0.7;\n    // initial ground\n    let ground = MeshBuilder.CreateGround(\n      \"plane\",\n      { width: settingData.planesize, height: settingData.planesize },\n      scene\n    );\n    let groundMaterial = new GridMaterial(\"groundMaterial\", scene);\n    groundMaterial.majorUnitFrequency = 10;\n    groundMaterial.minorUnitVisibility = 0.5;\n    groundMaterial.gridRatio = settingData.gridsize; //smallest block size\n    groundMaterial.backFaceCulling = false;\n    groundMaterial.mainColor = new Color3(1, 1, 1);\n    groundMaterial.lineColor = new Color3(1.0, 1.0, 1.0);\n    groundMaterial.opacity = 0.98;\n    ground.material = groundMaterial;\n    ground.isPickable = false;\n  };\n  /**\n   * Will run on every frame render.  We are spinning the box on y-axis.\n   */\n  const onRender = (scene) => {\n    // if (settingData.planesize !== ground.width){\n    // console.log(ground.material.width)\n    // }\n    // if (ground !== undefined) {\n    //   var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n    //   const rpm = 10;\n    //   ground.rotation.y += ((rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000));\n    // }\n  };\n\n  return (\n    <SceneComponent\n      antialias\n      onSceneReady={onSceneReady}\n      onRender={onRender}\n      id=\"viewport\"\n    ></SceneComponent>\n  );\n};\n\nexport default ViewPortComponent;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Confirm from \"@material-ui/icons/Check\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Swal from \"sweetalert2\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  textFieldtop: {\n    width: \"32ch\",\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n  textField: {\n    width: \"16ch\",\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n}));\n\nconst ExternalComponent = (props) => {\n  \n  const classes = useStyles();\n  const [externalData, setExternal] = React.useState({\n    externaltype: \"\",\n    externalname: \"\",\n    externalurl: \"\",\n    externalnew: false,\n    positionx: 0,\n    positiony: 0,\n    positionz: 0,\n    scalex: 100,\n    scaley: 100,\n    scalez: 100,\n    rotationx: 0,\n    rotationy: 0,\n    rotationz: 0,\n  });\n\n  const handleExternalChange = (event) => {\n    const name = event.target.name;\n    const eventvalue = event.target.value;\n    setExternal({\n      ...externalData,\n      [name]: event.target.value,\n      externalnew: false,\n    });\n\n    //handle child state change\n  };\n\n  const handlePositionChange = (prop) => (event) => {\n    setExternal({\n      ...externalData,\n      [prop]: event.target.value,\n      externalnew: false,\n    });\n    //handle child state change\n  };\n\n  function handleUpload(event) {\n    setExternal({...externalData, externalurl: event.target.files[0], externalnew: false });\n    // Add code here to upload file to server\n    // ...\n  }\n\n  const handleClickAddConfirm = () => {\n    if (!externalData.externalname) {\n      Swal.fire({\n        background: \"black\",\n        icon: \"info\",\n        text: \"Please assign a name for your object\",\n      });\n    } else {\n      setExternal({ ...externalData, externalnew: true });\n      if (props.onChange) {\n        props.onChange(externalData);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className={classes.margin}></div>\n      <Grid container direction=\"column\" alignItems=\"left\">\n        <Grid item>\n          <FormControl\n            size=\"small\"\n            variant=\"filled\"\n            className={classes.textFieldtop}\n          >\n            <InputLabel htmlFor=\"filled-age-native-simple\">\n              + Import Source\n            </InputLabel>\n            <Select\n              native\n              value={externalData.externaltype}\n              onChange={handleExternalChange}\n              inputProps={{\n                name: \"externaltype\",\n                id: \"filled-externals-native-simple\",\n              }}\n            >\n              <option aria-label=\"None\" value=\"\" />\n\n              <option value={\"URL\"}> External URL </option>\n              <option value={\"LOCAL\"}> Local File </option>\n            </Select>\n          </FormControl>\n        </Grid>\n        {externalData.externaltype === \"URL\" && (\n          <Grid item>\n            <TextField\n              size=\"small\"\n              id=\"filled-secondary-name\"\n              variant=\"filled\"\n              color=\"secondary\"\n              label=\"Paste URL below:\"\n              type=\"string\"\n              onChange={handlePositionChange(\"externalurl\")}\n              className={clsx(classes.margin, classes.textFieldtop)}\n              InputProps={\n                {\n                  // startAdornment: <InputAdornment position=\"start\">required:</InputAdornment>,\n                }\n              }\n            />\n          </Grid>\n        )}\n\n        {externalData.externaltype === \"LOCAL\" && (\n          <Grid item>\n            <TextField\n              size=\"small\"\n              id=\"filled-secondary-planesize\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              type=\"file\"\n              defaultValue={externalData.externalurl.name}\n              onChange={handleUpload}\n              className={clsx(classes.margin, classes.textFieldtop)}\n              InputProps={\n                {\n                  // startAdornment: <InputAdornment position=\"start\">required:</InputAdornment>,\n                }\n            }\n            />\n          </Grid>\n        )}\n      </Grid>\n      <div>\n        <Grid container direction=\"row\" alignItems=\"left\">\n          <Grid item>\n            <Grid container direction=\"column\" alignItems=\"left\">\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-name\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"object name\"\n                  type=\"string\"\n                  // defaultValue = {values.planesize}\n                  onChange={handlePositionChange(\"externalname\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={\n                    {\n                      // startAdornment: <InputAdornment position=\"start\">required:</InputAdornment>,\n                    }\n                  }\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  defaultValue={externalData.positionx}\n                  onChange={handlePositionChange(\"positionx\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"positiony\")}\n                  defaultValue={externalData.positiony}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"positionz\")}\n                  defaultValue={externalData.positionz}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-x (degree)\"\n                  type=\"number\"\n                  defaultValue={externalData.rotationx}\n                  onChange={handlePositionChange(\"rotationx\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-y (degree)\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"rotationy\")}\n                  defaultValue={externalData.rotationy}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-z (degree)\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"rotationz\")}\n                  defaultValue={externalData.rotationz}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Grid container direction=\"column\" alignItems=\"left\">\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-x\"\n                  type=\"number\"\n                  defaultValue={externalData.scalex}\n                  onChange={handlePositionChange(\"scalex\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-y\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"scaley\")}\n                  defaultValue={externalData.scaley}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-z\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"scalez\")}\n                  defaultValue={externalData.scalez}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <div className={classes.margin}></div>\n              <Grid item>\n                <Fab\n                  size=\"small\"\n                  color=\"secondary\"\n                  aria-label=\"confirm grid\"\n                  onClick={handleClickAddConfirm}\n                  color={externalData.externalnew ? \"primary\" : \"default\"}\n                >\n                  <Confirm />\n                </Fab>\n              </Grid>\n\n\n              \n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default ExternalComponent;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 'fit-content',\n    border: `1px solid ${theme.palette.divider}`,\n    // borderRadius: theme.shape.borderRadius,\n    backgroundColor: theme.palette.background.paper,\n    color: theme.palette.text.secondary,\n    '& svg': {\n      margin: theme.spacing(1.5),\n    },\n    '& hr': {\n      margin: theme.spacing(0, 0.5),\n    },\n  },\n}));\n\nconst ScaleLine = props => {\n// export default function VerticalDividers() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Grid container alignItems=\"left\" className={classes.root}>\n              plane:\n        <Divider orientation=\"vertical\" flexItem />\n                {props.children.planesize}\n        <Divider orientation=\"vertical\" flexItem />\n              grid:  \n        <Divider orientation=\"vertical\" flexItem />\n            {props.children.gridsize}\n      </Grid>\n    </div>\n  );\n}\nexport default ScaleLine;","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Confirm from \"@material-ui/icons/Check\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Swal from \"sweetalert2\";\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  textFieldtop: {\n    width: \"32ch\",\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n  textField: {\n    width: \"16ch\",\n    background: \"white\",\n    borderRadius: 8,\n    opacity: 0.8,\n  },\n}));\n\nconst AddComponent = (props) => {\n  const classes = useStyles();\n  const [primeData, setPrime] = React.useState({\n    primetype: \"\",\n    primename: \"\",\n    polyhydrontype: null,\n    addnew: false,\n    positionx: 0,\n    positiony: 0,\n    positionz: 0,\n    scalex: 100,\n    scaley: 100,\n    scalez: 100,\n    rotationx: 0,\n    rotationy: 0,\n    rotationz: 0,\n  });\n\n  const handlePrimeChange = (event) => {\n    const name = event.target.name;\n    const eventvalue = event.target.value;\n    if (event.target.value == \"POLYHYDRON\") {\n      // console.log('found')\n\n      (async () => {\n        console.log(\"selected Polyhydron, now choose type\");\n        const { value: Polyhydrons } = await Swal.fire({\n          position: \"top\",\n          background: \"black\",\n          input: \"select\",\n          inputOptions: {\n            Polyhydrons: {\n              0: \"Tetrahedron\",\n              1: \"Octahedron\",\n              2: \"Dodecahedron\",\n              3: \"Icosahedron\",\n              4: \"Rhombicuboctahedron\",\n              5: \"Triangular Prism\",\n              6: \"Pentagonal Prism\",\n              7: \"HexagonalPrism\",\n              8: \"Square Pyramid (J1)\",\n              9: \"Pentagonal Pyramid (J2)\",\n              10: \"Triangular Dipyramid (J12)\",\n              11: \"Pentagonal Dipyramid (J13)\",\n              12: \"Elongated Square Dipyramid (J15)\",\n              13: \"Elongated Pentagonal Dipyramid (J16)\",\n              14: \"Elongated Pentagonal Cupola (J20)\",\n            },\n          },\n          inputPlaceholder: \"Select a Polyhydron\",\n          showCancelButton: true,\n          inputValidator: (value) => {\n            return new Promise((resolve) => {\n              resolve();\n            });\n          },\n        });\n        if (Polyhydrons) {\n          Swal.fire({\n            background: \"black\",\n            icon: \"success\",\n            text: \"Selected\",\n            showConfirmButton: false,\n            timer: 1500,\n          });\n          setPrime({\n            ...primeData,\n            primetype: eventvalue,\n            polyhydrontype: Polyhydrons,\n            addnew: false,\n          });\n        }\n      })();\n    } else {\n      setPrime({\n        ...primeData,\n        [name]: event.target.value,\n        polyhydrontype: null,\n        addnew: false,\n      });\n    }\n\n    //handle child state change\n  };\n\n  const handlePositionChange = (prop) => (event) => {\n    setPrime({ ...primeData, [prop]: event.target.value, addnew: false });\n    //handle child state change\n  };\n\n  const handleClickAddConfirm = () => {\n    if (!primeData.primename){\n      Swal.fire({\n          background: \"black\",\n          icon: \"info\",\n          text: \"Please assign a name for your object\",\n        });\n  }\n  else{\n    setPrime({ ...primeData, addnew: true });\n    if (props.onChange) {\n      props.onChange(primeData);\n    }\n  }\n  };\n  return (\n    <div>\n      <div className={classes.margin}></div>\n      <Grid container direction=\"row\" alignItems=\"center\">\n        <Grid item>\n          <FormControl\n            size=\"small\"\n            variant=\"filled\"\n            className={classes.textFieldtop}\n          >\n            <InputLabel htmlFor=\"filled-age-native-simple\">\n              + Primes (All Fields Required)\n            </InputLabel>\n            <Select\n              native\n              value={primeData.primetype}\n              onChange={handlePrimeChange}\n              inputProps={{\n                name: \"primetype\",\n                id: \"filled-primes-native-simple\",\n              }}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"BOX\"}>BOX</option>\n              <option value={\"SPHERE\"}>SPHERE</option>\n              <option value={\"CYLINDER\"}>CYLINDER</option>\n              <option value={\"POLYHYDRON\"}>POLYHYDRON</option>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <div>\n        <Grid container direction=\"row\" alignItems=\"left\">\n          <Grid item>\n            <Grid container direction=\"column\" alignItems=\"left\">\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-name\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"object name\"\n                  type=\"string\"\n                  // defaultValue = {values.planesize}\n                  onChange={handlePositionChange(\"primename\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={\n                    {\n                      // startAdornment: <InputAdornment position=\"start\">required:</InputAdornment>,\n                    }\n                  }\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  defaultValue={primeData.positionx}\n                  onChange={handlePositionChange(\"positionx\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"positiony\")}\n                  defaultValue={primeData.positiony}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"center position\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"positionz\")}\n                  defaultValue={primeData.positionz}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-x (degree)\"\n                  type=\"number\"\n                  defaultValue = {primeData.rotationx}\n                  onChange={handlePositionChange(\"rotationx\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-y (degree)\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"rotationy\")}\n                 defaultValue = {primeData.rotationy}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"rotation-z (degree)\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"rotationz\")}\n                 defaultValue = {primeData.rotationz}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Grid container direction=\"column\" alignItems=\"left\">\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-x\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-x\"\n                  type=\"number\"\n                  defaultValue={primeData.scalex}\n                  onChange={handlePositionChange(\"scalex\")}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">X:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-y\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-y\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"scaley\")}\n                  defaultValue={primeData.scaley}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Y:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  size=\"small\"\n                  id=\"filled-secondary-z\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  label=\"scale-z\"\n                  type=\"number\"\n                  onChange={handlePositionChange(\"scalez\")}\n                  defaultValue={primeData.scalez}\n                  className={clsx(classes.margin, classes.textField)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">Z:</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <div className={classes.margin}></div>\n              <Grid item>\n                <Fab\n                  size=\"small\"\n                  color=\"secondary\"\n                  aria-label=\"confirm grid\"\n                  onClick={handleClickAddConfirm}\n                  color={primeData.addnew ? \"primary\" : \"default\"}\n                >\n                  <Confirm />\n                </Fab>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default AddComponent;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Button from '@material-ui/core/Button';\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SetIcon from \"@material-ui/icons/TuneTwoTone\";\nimport DownloadIcon from \"@material-ui/icons/GetAppRounded\";\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Setting from \"./settingtable/SettingComponent\";\nimport Upload from \"./uploadtable/UploadComponent\";\nimport Library from \"./builtintable/BuiltInComponent\";\nimport ViewPort from \"./viewer/ViewPortComponent\";\nimport External from \"./externaltable/ExternalComponent\";\nimport \"./ViewWithControl.css\";\nimport Scaleline from \"./viewer/ScalelineComponent\";\nimport Add from \"./addtable/AddComponent\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFileUpload } from \"@fortawesome/free-solid-svg-icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      marginRight: theme.spacing(2),\n      fontsize: 12,\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function FloatingActionButtons() {\n  const classes = useStyles();\n\n  const [settingData, setSettings] = React.useState({\n    planesize: 6000,\n    gridsize: 50,\n    gridChange: false,\n    confirmed: false,\n    lightR: 0.45,\n    lightG: 0.45,\n    lightB: 0.45,\n  });\n\n  const [addData, setAdd] = React.useState({\n    primetype: \"\",\n    primename: \"\",\n    addnew: false,\n    positionx: 0,\n    positiony: 0,\n    positionz: 0,\n    scalex: 100,\n    scaley: 100,\n    scalez: 100,\n    rotationx: 0,\n    rotationy: 0,\n    rotationz: 0,\n  });\n\n  const [libraryData, setBuiltin] = React.useState({\n    buultintype: \"\",\n    builtinname: \"\",\n    builtinnew: false,\n    positionx: 0,\n    positiony: 0,\n    positionz: 0,\n    scalex: 1,\n    scaley: 1,\n    scalez: 1,\n    rotationx: 0,\n    rotationy: 0,\n    rotationz: 0,\n  });\n\n  const [externalData, setExternal] = React.useState({\n    externaltype: \"\",\n    externalname: \"\",\n    externalurl: \"\",\n    externalnew: false,\n    positionx: 0,\n    positiony: 0,\n    positionz: 0,\n    scalex: 100,\n    scaley: 100,\n    scalez: 100,\n    rotationx: 0,\n    rotationy: 0,\n    rotationz: 0,\n  });\n\n  const [fileControl, setFileControl] = React.useState({\n    file: \"\",\n    fileadd: false,\n  });\n\n  const changeAdd = (data) => {\n    if (\n      data.primetype != addData.primetype ||\n      data.primename != addData.primename ||\n      data.positionx != addData.positionx ||\n      data.positiony != addData.positiony ||\n      data.positionz != addData.positionz ||\n      data.scalex != addData.scalex ||\n      data.scalez != addData.scalez ||\n      data.scaley != addData.scaley ||\n      data.rotationx != addData.rotationx ||\n      data.rotationy != addData.rotationy ||\n      data.rotationz != addData.rotationz\n    ) {\n      setAdd({ ...data, addnew: true });\n    }\n  };\n\n  const changeLibrary = (data) => {\n    if (\n      data.builtintype != libraryData.builtintype ||\n      data.builtinname != libraryData.builtinname ||\n      data.positionx != libraryData.positionx ||\n      data.positiony != libraryData.positiony ||\n      data.positionz != libraryData.positionz ||\n      data.scalex != libraryData.scalex ||\n      data.scalez != libraryData.scalez ||\n      data.scaley != libraryData.scaley ||\n      data.rotationx != libraryData.rotationx ||\n      data.rotationy != libraryData.rotationy ||\n      data.rotationz != libraryData.rotationz\n    ) {\n      setBuiltin({ ...data, builtinnew: true });\n    }\n  };\n\n  const changeExternal = (data) => {\n    if (\n      data.externaltype != externalData.externaltype ||\n      data.externalname != externalData.externalname ||\n      data.externalurl != externalData.externalurl ||\n      data.positionx != externalData.positionx ||\n      data.positiony != externalData.positiony ||\n      data.positionz != externalData.positionz ||\n      data.scalex != externalData.scalex ||\n      data.scalez != externalData.scalez ||\n      data.scaley != externalData.scaley ||\n      data.rotationx != externalData.rotationx ||\n      data.rotationy != externalData.rotationy ||\n      data.rotationz != externalData.rotationz\n\n    ) {\n      setExternal({ ...data, externalnew: true });\n    }\n  };\n\n  const changeSettings = (data) => {\n    if (\n      data.planesize != settingData.planesize ||\n      data.gridsize != settingData.gridsize ||\n      data.lightR != settingData.lightR ||\n      data.lightB != settingData.lightB ||\n      data.lightG != settingData.lightG\n    ) {\n      console.log(\"a grid change happened\");\n      setSettings({ ...data, gridChange: true });\n    } else {\n      console.log(\"no change needed\");\n    }\n  };\n\n  const changeUpload = (data) => {\n    if (data.file.name != fileControl.file.name) {\n      console.log(\"a file add happened\");\n      setFileControl({ ...data, fileadd: true });\n    } else {\n      console.log(\"no need to change\");\n    }\n  };\n\n  const [values, setValues] = React.useState({\n    showAdd: false,\n    showSettings: false,\n    showEdit: false,\n    showImport: false,\n    showLibrary: false,\n  });\n\n  const [assetManagerData, setAssetManager] = React.useState({\n    showAssetManager: true,\n    switchtoparent: false,\n  });\n\n  const handleSettingClick = () => {\n    setValues({\n      showImport: false,\n      showEdit: false,\n      showAdd: false,\n      showLibrary: false,\n      showSettings: !values.showSettings,\n    });\n  };\n\n  const handleSwitchClick = () => {\n    setAssetManager({\n      ...assetManagerData,\n      switchtoparent: !assetManagerData.switchtoparent,\n    });\n  };\n  const handleAddClick = () => {\n    setValues({\n      showImport: false,\n      showEdit: false,\n      showLibrary: false,\n      showAdd: !values.showAdd,\n      showSettings: false,\n    });\n  };\n  const handleLibraryClick = () => {\n    setValues({\n      showEdit: false,\n      showAdd: false,\n      showLibrary: !values.showLibrary,\n      showSettings: false,\n      showImport: false,\n    });\n  };\n  const handleImportClick = () => {\n    setValues({\n      showEdit: false,\n      showAdd: false,\n      showLibrary: false,\n      showSettings: false,\n      showImport: !values.showImport,\n    });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <div className=\"Navigation\">\n          <Fab\n            size=\"small\"\n            color={values.showSettings ? \"primary\" : \"default\"}\n            onClick={handleSettingClick}\n          >\n            <SetIcon aria-label=\"setting\" />\n          </Fab>\n          <Fab\n            size=\"small\"\n            aria-label=\"add\"\n            color={values.showAdd ? \"primary\" : \"default\"}\n            onClick={handleAddClick}\n          >\n            <AddIcon />\n          </Fab>\n          <Fab\n            size=\"small\"\n            aria-label=\"add\"\n            color={values.showLibrary ? \"primary\" : \"default\"}\n            onClick={handleLibraryClick}\n          >\n            <LibraryAddIcon />\n          </Fab>\n          <Fab\n            size=\"small\"\n            aria-label=\"import\"\n            color={values.showImport ? \"primary\" : \"default\"}\n            onClick={handleImportClick}\n          >\n            <FontAwesomeIcon icon={faFileUpload} size=\"lg\" />\n          </Fab>\n\n          <Fab size=\"small\" aria-label=\"download\">\n            <DownloadIcon />\n          </Fab>\n\n          {values.showSettings && (\n            <div className=\"SettingTable\">\n              <Setting onChange={changeSettings}></Setting>\n            </div>\n          )}\n          {values.showAdd && (\n            <div className=\"AddTable\">\n              <Add onChange={changeAdd}></Add>\n            </div>\n          )}\n          {values.showImport && (\n            <div className=\"UploadTable\">\n              <External onChange={changeExternal}></External>\n            </div>\n          )}\n          {values.showLibrary && (\n            <div className=\"LibraryTable\">\n              <Library onChange={changeLibrary}></Library>\n            </div>\n          )}\n        </div>\n      </div>\n\n\n      {assetManagerData.showAssetManager && (\n        <div className=\"AssetManager\">\n        <Grid container direction=\"column\" alignItems=\"left\">\n          <Grid item>\n          <Fab size=\"small\" aria-label=\"edit\">\n            <EditIcon />\n          </Fab>\n          <Fab size=\"small\" aria-label=\"delete\">\n            <DeleteIcon />\n          </Fab>\n          </Grid>\n          <Grid item>\n          {/* <Button onClick={handleSwitchClick} variant=\"contained\" color={assetManagerData.switchtoparent ? \"primary\" : \"default\"} >Select with Parent Node</Button> */}\n          <FormControl component=\"fieldset\">\n            <FormHelperText>Selection Mode</FormHelperText>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={assetManagerData.switchtoparent}\n                    onChange={handleSwitchClick}\n                    name=\"selection-mode\"\n                  />\n                }\n                label=\"select root\"\n              />\n            </FormGroup>\n          </FormControl>\n          </Grid>\n      </Grid>\n        </div>\n      )}\n\n\n      <div className=\"BottomView\">\n        <ViewPort\n          settingData={settingData}\n          setSettings={setSettings}\n          addData={addData}\n          setAdd={setAdd}\n          fileControl={fileControl}\n          setFileControl={setFileControl}\n          libraryData={libraryData}\n          setBuiltin={setBuiltin}\n          externalData={externalData}\n          setExternal={setExternal}\n          assetManagerData={assetManagerData}\n          setAssetManager={setAssetManager}\n        />\n      </div>\n      <div className=\"Scaleline\">\n        <Scaleline>{settingData}</Scaleline>\n      </div>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\nfunction handleClick(event) {\n  event.preventDefault();\n  window.open(\"https://www.muyangguo.xyz/\", \"_blank\");\n}\n\n\nexport default function SimpleBreadcrumbs() {\n  return (\n    <Breadcrumbs aria-label=\"breadcrumb\">\n      <Typography color=\"textPrimary\">Prototype V1</Typography>\n      <Link color=\"inherit\" href=\"https://www.muyangguo.xyz\" onClick={handleClick}>@Muyang Guo\n      </Link>\n    </Breadcrumbs>\n  );\n}","import React from 'react';\nimport View from './components/controllerview/ViewWithControl';\nimport './components/controllerview/ViewWithControl.css';\nimport Footer from './components/footer/FooterComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <View></View>\n      <div className = \"Footer\">\n      <Footer></Footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}